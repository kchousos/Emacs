#+title: My Emacs configuration
#+subtitle: A literate =init.el=
#+author: Konstantinos Chousos
#+language: en
#+options: num:2 H:5 toc:nil date:nil timestamp:nil <:t p:t
#+STARTUP: showall

This document hosts my [[https://www.gnu.org/software/emacs/][Emacs]] configuration, in the style of [[https://en.wikipedia.org/wiki/Literate_programming][literate programming]], by leveraging [[https://orgmode.org/][Org-Mode]].

#+toc: headlines 3

* TODOs

** TODO [#A] Organize packages in better categories

** TODO [#A] Documentation and commentary need (a lot of) improvement

** TODO [#B] Replace straight.el with package.el (?)

** TODO [#B] Mirror in personal site

** TODO [#C] Add tree-sitter support

** TODO [#C] Create dashboard buttons

** DONE Replace lsp with eglot
CLOSED: [2023-05-04 Thu 21:53]

* Miscellaneous configurations

This section consists of various little configurations and settings that generally improve the quality of life in Emacs. No packages are configured here, only built-in options and variables.

This are just little tweaks to make the Emacs experience more pleasurable.

- Startup Performance

  #+begin_src emacs-lisp :tangle ./init.el
;; -*- lexical-binding: t; -*-

;; The default is 800 kilobytes.  Measured in bytes.
(setq gc-cons-threshold (* 50 1000 1000))

;; Profile emacs startup
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "*** Emacs loaded in %s seconds with %d garbage collections."
                     (emacs-init-time "%.2f")
                     gcs-done)))
  #+end_src

- Native compilation

  #+begin_src emacs-lisp :tangle ./init.el
;; Silence compiler warnings as they can be pretty disruptive
(setq native-comp-async-report-warnings-errors nil)

;; Set the right directory to store the native comp cache
(add-to-list 'native-comp-eln-load-path (expand-file-name "eln-cache/" user-emacs-directory))
  #+end_src

- Full name

  #+begin_src emacs-lisp :tangle ./init.el
(setq user-full-name "Konstantinos Chousos")
  #+end_src

- Disables the start-up message of default emacs.

  #+begin_src emacs-lisp :tangle ./init.el
(setq inhibit-startup-message t)
  #+end_src

- Frame sizing

  #+begin_src emacs-lisp :tangle ./init.el
(add-to-list 'default-frame-alist '(height . 60))
(add-to-list 'default-frame-alist '(width . 220))
  #+end_src

- Remove some visual clutter

  #+begin_src emacs-lisp :tangle ./init.el
(tool-bar-mode -1)
;; (tooltip-mode -1)
;; (menu-bar-mode -1)
  #+end_src

- Encoding settings

  #+begin_src emacs-lisp :tangle ./init.el
(set-language-environment "UTF-8")
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
  #+end_src

- Wrap lines instead of showing only the first 80-something characters and then having to horizontally scroll to view the rest.

  #+begin_src emacs-lisp :tangle ./init.el
(set-default 'truncate-lines nil)
  #+end_src

- Use the system clipboard

  #+begin_src emacs-lisp :tangle ./init.el
(setq x-select-enable-clipboard t)
  #+end_src

- Use =view-mode= for read-only files

  #+begin_src emacs-lisp :tangle ./init.el
(setq view-read-only t)
  #+end_src
  
- Disable the "bell" sound

  #+begin_src emacs-lisp :tangle ./init.el
(setq ring-bell-function #'ignore)
  #+end_src

- When asked a =yes or no= question, just typing ~y~ or ~n~ will do the trick.

  #+begin_src emacs-lisp :tangle ./init.el
(defalias 'yes-or-no-p 'y-or-n-p)
  #+end_src

- Show column number as well in the modeline

  #+begin_src emacs-lisp :tangle ./init.el
(setq column-number-mode t)
  #+end_src

- Allow resizing

  #+begin_src emacs-lisp :tangle ./init.el
;; (setq frame-inhibit-implied-resize t)
  #+end_src

- Fringes configuration

  #+begin_src emacs-lisp :tangle ./init.el
;; Remove the line-wrap fringe indicators
(setq-default fringe-indicator-alist (assq-delete-all 'truncation fringe-indicator-alist))

(fringe-mode 10)
  #+end_src

- Enable word wrap with whit

  #+begin_src emacs-lisp :tangle ./init.el
(setq global-word-wrap-whitespace-mode t)
  #+end_src

- Blink cursor

    #+begin_src emacs-lisp :tangle ./init.el
(blink-cursor-mode 1)
    #+end_src

- Do not highlight the current line

  This is enabled only in programming modes

  #+begin_src emacs-lisp :tangle ./init.el
(global-hl-line-mode 0)
  #+end_src

- Make Emacs fullscreen by default

  #+begin_src emacs-lisp :tangle ./init.el
(add-to-list 'default-frame-alist '(fullscreen . maximized))
  #+end_src

- Scroll bar configuration

  #+begin_src emacs-lisp :tangle ./init.el
(global-set-key (kbd "M-<f3>") 'scroll-bar-mode)
(scroll-bar-mode 0)
(window-divider-mode 0)

(setq scroll-bar-adjust-thumb-portion t)

(set-window-scroll-bars (minibuffer-window) nil nil nil nil t)

;; (setq mouse-wheel-scroll-amount '(5 ((shift) . 1)))

(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling

(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse

(setq scroll-step 1) ;; keyboard scroll one line at a time

(pixel-scroll-precision-mode t)

;; (setq scroll-conservatively 100)
  #+end_src

- Don't clutter the directory of the current file with backups

  #+begin_src emacs-lisp :tangle ./init.el
(setq make-backup-files nil)
(setq auto-save-default nil)
  #+end_src

- Tab configuration

  #+begin_src emacs-lisp :tangle ./init.el
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(setq indent-line-function #'insert-tab)
  #+end_src

- Enable electric parentheses

  #+begin_src emacs-lisp :tangle ./init.el
(setq electric-pair-pairs '(
                            (?\{ . ?\})
                            (?\( . ?\))
                            (?\[ . ?\])
                            (?\" . ?\")
                            ))
(electric-pair-mode t)

;; (add-hook 'org-mode-hook (lambda ()
;;            (setq-local electric-pair-inhibit-predicate
;;                    `(lambda (c)
;;                   (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
  #+end_src

- Disable line numbers

  #+begin_src emacs-lisp :tangle ./init.el
(global-display-line-numbers-mode 0)
  #+end_src

- When you do show line numbers, show them relative to current line

  #+begin_src emacs-lisp :tangle ./init.el
(setq display-line-numbers-type 'relative)
  #+end_src

- Disable meaningless warnings

  #+begin_src emacs-lisp :tangle ./init.el
(setq warning-minimum-level :emergency)
  #+end_src

- Enable recent files history

  #+begin_src emacs-lisp :tangle ./init.el
(recentf-mode 1)
(setq recentf-max-menu-items 25)
(setq recentf-max-saved-items 25)
(global-set-key "\C-x\ \C-r" 'recentf-open-files)
(run-at-time nil (* 5 60) 'recentf-save-list)
  #+end_src

- Hides minor modes in modeline.

  #+begin_src emacs-lisp :tangle no
(setq-default mode-line-format '("%e" mode-line-front-space
                         (:propertize
                          ("" mode-line-mule-info mode-line-client mode-line-modified mode-line-remote)
                          display
                          (min-width
                           (0.0)))
                         mode-line-frame-identification
                         mode-line-buffer-identification
                         (vc-mode vc-mode)
                         "  "
                         mode-line-position
                         "  "
                         "  "
                         mode-name
                         "  "
                         mode-line-misc-info
                         mode-line-end-spaces))
  #+end_src

* Fonts

I dislike Emacs' default fonts. Since I run Emacs in a daemon/client setup, the following function is needed to correctly apply the custom fonts to every new frame.

#+begin_src emacs-lisp :tangle ./init.el
  (defun set-font-faces ()
        (message "Setting faces!")
        (set-fontset-font t 'symbol (font-spec :family "Noto Color Emoji" :size 24))
        (set-face-attribute 'default nil :family "Iosevka" :height 120)
        (set-face-attribute 'fixed-pitch nil :family "Iosevka" :height 1.0)
        (set-face-attribute 'variable-pitch nil :family "Iosevka Aile"))

(if (daemonp)
    (add-hook 'after-make-frame-functions
              (lambda (frame)
                (with-selected-frame frame
                  (set-font-faces))))
    (set-font-faces))
#+end_src

** Line spacing

#+begin_src emacs-lisp :tangle ./init.el
(setq line-spacing 0.2)
#+end_src

* Key-binds

Custom key-binds for built-in functionality of Emacs. Mainly used just to speed things up.

** Toggling line numbers

Generally I find line numbers take visual space without giving any valuable information (one exception being programming). Since I use Emacs a lot with prose, I have line numbers disabled. But, if I need them any time there is this keybind.

#+begin_src emacs-lisp :tangle ./init.el
(global-set-key (kbd "M-<f2>") #'(lambda () (interactive)   (display-line-numbers-mode #'toggle)))
#+end_src

** Vertical and horizontal window splits

As the title suggests, this two keybinds split the frame into two windows.

*** Vertical

#+begin_src emacs-lisp :tangle ./init.el
(defun split-and-follow-vertically ()
  (interactive)
  (split-window-right)
  (balance-windows)
  (other-window 1))
#+end_src

#+begin_src emacs-lisp :tangle ./init.el
(global-set-key (kbd "C-x 3") #'split-and-follow-vertically)
#+end_src

*** Horizontal

#+begin_src emacs-lisp :tangle ./init.el
(defun split-and-follow-horizontally ()
  (interactive)
  (split-window-below)
  (balance-windows)
  (other-window 1))
#+end_src

#+begin_src emacs-lisp :tangle ./init.el
(global-set-key (kbd "C-x 2") #'split-and-follow-horizontally)
#+end_src

** Toggle Greek and English input methods

Since Greek is my mother tongue, I find myself frequently writing in Greek. So, I need a quick way to toggle the input language without losing all the Emacs keybindings.

#+begin_src emacs-lisp :tangle ./init.el
(add-hook 'after-init-hook (lambda () (setq default-input-method "greek")))
#+end_src

** Kill this buffer

The default behavior of Emacs is to open the buffer list and "kill" the current one by selecting it. This means that to kill the current buffer you must to type ~C-x k RET~.

This way, you can just simply type ~C-x C-k~.

#+begin_src emacs-lisp :tangle ./init.el
(global-set-key (kbd "C-x C-k") #'kill-this-buffer)
#+end_src

** WoMan

Open =woMan (without man)=, an emacs native program to read man pages.

#+begin_src emacs-lisp :tangle ./init.el
(global-set-key (kbd "C-c w") #'woman)
#+end_src

* Packages

This section consists of various packages, built-in or external, that add many extra features.

** Package management

I use =straight.el= over the default package manager =package.el= simply because the former allows me to install packages from git repos that are not available on the MELPA repos the same way with the ones that are.

We only need to bootstrap =straight.el= and then we can use the =use-package= macro the same way as before.

This line is needed for =straight.el= to install in Emacs 29 (see [[https://github.com/radian-software/straight.el/issues/1076][here]]).

#+begin_src emacs-lisp :tangle ./init.el
(setq native-comp-deferred-compilation-deny-list nil)
#+end_src

#+begin_src emacs-lisp :tangle ./init.el
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

;; Use straight.el for use-package expressions
(straight-use-package 'use-package)

;; Disable package.el in favor of straight.el
(setq package-enable-at-startup nil)
#+end_src

** Color theme

Since I spend a lot of time inside Emacs, I want to have a good-looking, easy-on-the-eyes color scheme. I also need it to play nice with the other packages on my system and also have a light and dark variant, since I switch between them throughout the day.

[[https://protesilaos.com/emacs/modus-themes][Modus themes]], developed by [[https://protesilaos.com/][Protesilaos Stavrou]], are one of the best color schemes for Emacs right now. They became bundled with Emacs, so it isn't even needed to install anything. They are modular, well documented, easily hackable and robust.

#+begin_src emacs-lisp :tangle ./init.el
(setq modus-themes-headings
      '((1 . (1.1))
        (2 . (1.075))
        (3 . (1.05))
        (4 . (1.025))
        (t . (1.0))))

(load-theme 'modus-operandi)

(use-package modus-themes
  :straight nil
  :init
  ;; Add all your customizations prior to loading the themes
  (setq modus-themes-italic-constructs nil
        modus-themes-bold-constructs nil
        modus-themes-mixed-fonts t
        modus-themes-subtle-line-numbers t
        modus-themes-deuteranopia nil

        modus-themes-fringes nil ; {nil,'subtle,'intense}

        ;; Options for `modus-themes-mode-line' are either nil, or a list
        ;; that can combine any of `3d' OR `moody', `borderless',
        ;; `accented'.  The variable's doc string shows all possible
        ;; combinations.
        modus-themes-mode-line '(accented)

        ;; Options for `modus-themes-syntax': nil, 'faint,
        ;; 'yellow-comments, 'green-strings,
        ;; 'yellow-comments-green-strings, 'alt-syntax,
        ;; 'alt-syntax-yellow-comments, 'faint-yellow-comments
        modus-themes-syntax '(faint)

        ;; Options for `modus-themes-hl-line': nil, 'intense-background,
        ;; 'accented-background, 'underline-neutral,
        ;; 'underline-accented, 'underline-only-neutral,
        ;; 'underline-only-accented
        modus-themes-hl-line '(accented)

        modus-themes-paren-match '(intense) ; {nil,'subtle-bold,'intense,'intense-bold}

        ;; Options for `modus-themes-links': nil, 'faint,
        ;; 'neutral-underline, 'faint-neutral-underline, 'no-underline,
        ;; 'underline-only, 'neutral-underline-only
        modus-themes-links '(faint neutral-underline)

        ;; Options for `modus-themes-prompts' are either nil (the
        ;; default), or a list of properties that may include any of those
        ;; symbols: `background', `bold', `gray', `intense'
        modus-themes-prompts nil

        modus-themes-completions '(opinionated) ; {nil,'moderate,'opinionated}

        ;; Options for `modus-themes-region': nil, 'no-extend, 'bg-only,
        ;; 'bg-only-no-extend, 'accent, 'accent-no-extend
        modus-themes-region nil

        ;; Options for `modus-themes-diffs': nil, 'desaturated,
        ;; 'bg-only, 'deuteranopia, 'fg-only-deuteranopia
        modus-themes-diffs '(desaturated)

        org-highlight-latex-and-related '(nil)

        modus-themes-lang-checkers '(text-also)

        modus-themes-org-blocks nil; {nil,'gray-background,'tinted-background}

        modus-themes-markup '(background)
        )
  ;; Load the theme files before enabling a theme
  (modus-themes-load-themes)
  :config
  ;; Load the theme of your choice:
  (modus-themes-load-operandi) ;; OR (modus-themes-load-vivendi)
  :bind ("<f5>" . modus-themes-toggle))
#+end_src

** Programming

Configurations and packages related to programming in Emacs.

*** Eglot

Emacs' native LSP client.

**** Eldoc-Box

This package displays ElDoc documentations in a childframe. The childfrme is selectable and scrollable with mouse, even thought the cursor is hidden.

#+begin_src emacs-lisp :tangle ./init.el
(use-package eldoc-box
  :straight t)

(add-hook 'eglot-managed-mode-hook #'eldoc-box-hover-at-point-mode t)
#+end_src

*** Languages

Settings divided by language.

**** MIPS Assembly

#+begin_src emacs-lisp :tangle ./init.el
(use-package mips-mode
 :straight t
 :mode "\\.s$")
#+end_src

**** Yaml

#+begin_src emacs-lisp :tangle ./init.el
(use-package yaml-mode
    :straight t)
#+end_src

**** Fish Shell

#+begin_src emacs-lisp :tangle ./init.el
(use-package fish-mode
    :straight t)
#+end_src

**** Octave

#+begin_src emacs-lisp :tangle ./init.el
(setq auto-mode-alist
      (cons '("\\.m$" . octave-mode) auto-mode-alist))

(setq-default inferior-octave-startup-args '("-i" "-q" "--line-editing"))
#+end_src

**** Prolog

#+begin_src emacs-lisp :tangle no
(setq auto-mode-alist
      (cons '("\\.pl$" . prolog-mode) auto-mode-alist))
#+end_src

***** ECLiPSe

#+begin_src emacs-lisp :tangle ./init.el
;; (setq prolog-system 'eclipse)

(autoload 'eclipse-mode "/home/kchou/.config/emacs/straight/build/eclipse/eclipse.el" "ECLIPSE editing mode" t)

(setq auto-mode-alist (cons '("\\.pl" . eclipse-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.ecl" . eclipse-mode) auto-mode-alist))
#+end_src

**** Haskell

***** haskell-mode
#+begin_src emacs-lisp :tangle ./init.el
(use-package haskell-mode
  :straight t)

(setq auto-mode-alist
      (cons '("\\.hs$" . haskell-mode) auto-mode-alist))
#+end_src

**** Python

***** Pyvenv

Makes Emacs recognize different python virtual environments.

#+begin_src emacs-lisp :tangle ./init.el
(use-package pyvenv
  :straight t
  :init
  (setenv "WORKON_HOME" (expand-file-name "~/.conda/envs"))
  :config
  (pyvenv-mode 1)
  )

;; (add-hook 'python-mode-hook #'pyvenv-mode)
;; (add-hook 'python-mode-hook (lambda () (pyvenv-workon 'ai)))
;; (add-hook 'pyvenv-post-activate-hooks
;;           #'(lambda ()
;;               (call-interactively #'lsp)))
#+end_src

**** Sagemath

***** Sage-shell-mode
#+begin_src emacs-lisp :tangle ./init.el
(use-package sage-shell-mode
  :straight t)
#+end_src

*** General

Some general settings for all programming modes.

#+begin_src emacs-lisp :tangle ./init.el
  (add-hook 'prog-mode-hook (lambda () (display-line-numbers-mode 1)))
  (add-hook 'prog-mode-hook (lambda () (hl-line-mode 1)))
  (add-hook 'prog-mode-hook (lambda () (display-fill-column-indicator-mode 1)))
  (add-hook 'prog-mode-hook (lambda () (setq truncate-lines t)))

  (setq gc-cons-threshold 100000000)
  (setq read-process-output-max (* 1024 1024)) ;; 1mb
#+end_src

*** Comment-Tags

Makes keywords like TODO, BUG, FIXED etc. in comments standout.

#+begin_src emacs-lisp :tangle ./init.el
(use-package comment-tags
  :straight t
  :hook ((prog-mode . comment-tags-mode)))
#+end_src

*** Indent-Guide

Shows indentation guides.

#+begin_src emacs-lisp :tangle ./init.el
(use-package indent-guide
    :straight t)
(setq indent-guide-char "│")
(setq indent-guide-recursive t)

(add-hook 'prog-mode-hook #'indent-guide-mode)
#+end_src

** Project management

*** Project.el

In addition to files/folders like =.git=, now =project.el= will recognize projects by placing a =.project= file in the root directory of the project.

#+begin_src emacs-lisp :tangle ./init.el
(setq project-vc-extra-root-markers '(".project"))
#+end_src

Adds the =m= key for the =magit= option.

#+begin_src emacs-lisp :tangle ./init.el
(define-key project-prefix-map "m" #'magit-project-status)
#+end_src

** Typography

Packages to control fonts, icons and other typographic features of Emacs.

*** Mixed-Pitch

Allows you to have both variable and fixed pitch fonts depending on the context of the text. For example, normal text is rendered in a variable font, but code in a fixed one.

#+begin_src emacs-lisp :tangle ./init.el
(use-package mixed-pitch
  :straight t
  :hook
  ;; If you want it in all text modes:
  (text-mode . mixed-pitch-mode))

(setq mixed-pitch-variable-pitch-cursor nil)
(setq mixed-pitch-set-height nil)
#+end_src

*** Font ligatures

This package enables font ligatures (if the font supports them).

#+begin_src emacs-lisp :tangle ./init.el
(use-package ligature
  :straight t
  ;; Enable traditional ligature support in eww-mode, if the
  ;; `variable-pitch' face supports it
  :config
  ;; Enable all programming ligatures in programming modes
  (ligature-set-ligatures 'prog-mode '(":::" "::=" "&&" "||" "::" ":=" "==" "!=" ">=" ">>" "<="
                                       "<<" "??" ";;" "->" "<-" "-->" "<--"
                                       ))
  ;; Enables ligature checks globally in all buffers. You can also do it
  ;; per mode with `ligature-mode'.
  (global-ligature-mode t))
#+end_src

*** All-the-Icons

This is a font that consists of different icons, mainly used to indicate filetypes, programming languages etc.

- Main package

    #+begin_src emacs-lisp :tangle ./init.el
    (use-package all-the-icons
      :straight t)
    #+end_src

 - Use icons in the mini-buffer

    #+begin_src emacs-lisp :tangle ./init.el
    (use-package all-the-icons-completion
      :straight t
      :after (marginalia all-the-icons)
      :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
      :init
      (all-the-icons-completion-mode))
    #+end_src

** Window and frame handling

This packages are for navigation and handling of buffers, frames and windows.

*** Winner-mode

Built-in package that saves window states and can cycle through them.

#+begin_src emacs-lisp :tangle ./init.el
(winner-mode t)
#+end_src

*** Ace-Window

Move around windows without having to cycle through them.

#+begin_src emacs-lisp :tangle ./init.el
(global-set-key (kbd "M-o") 'ace-window)
(setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
(setq aw-dispatch-always nil)
(setq aw-background nil)
(defvar aw-dispatch-alist
  '((?x aw-delete-window "Delete Window")
    (?m aw-swap-window "Swap Windows")
    (?M aw-move-window "Move Window")
    (?c aw-copy-window "Copy Window")
    (?j aw-switch-buffer-in-window "Select Buffer")
    (?n aw-flip-window)
    (?u aw-switch-buffer-other-window "Switch Buffer Other Window")
    (?c aw-split-window-fair "Split Fair Window")
    (?v aw-split-window-vert "Split Vert Window")
    (?b aw-split-window-horz "Split Horz Window")
    (?o delete-other-windows "Delete Other Windows")
    (?? aw-show-dispatch-help))
  "List of actions for `aw-dispatch-default'.")

(use-package ace-window
  :straight t)
#+end_src

*** Resize-Window

Resize windows with keybinds.

#+begin_src emacs-lisp :tangle ./init.el
(setq resizewindow-allow-backgrounds nil)
(global-set-key (kbd "C-c C-;") 'resize-window)
(use-package resize-window
  :straight t)
#+end_src

*** Tab-bar

#+begin_src emacs-lisp :tangle ./init.el
(setq tab-bar-show 1)
#+end_src

** File history

Default undo/redo doesn't allow going back to previous "futures". This package treats file history as a tree and therefore offers much more flexibility.

#+begin_src emacs-lisp :tangle ./init.el
(use-package undo-tree
  :straight t)

(setq undo-tree-auto-save-history t)

(defadvice undo-tree-make-history-save-file-name
    (after undo-tree activate)
  (setq ad-return-value (concat ad-return-value ".gz")))

(setq undo-tree-visualizer-diff t)
(setq undo-tree-history-directory-alist '(("." . "~/.config/emacs/undo")))

(global-undo-tree-mode)
#+end_src

** Snippets

I use yasnippet to manage my snippets.

*** Yasnippet

#+begin_src emacs-lisp :tangle ./init.el
  (use-package yasnippet
      :straight t
      :config
      (setq yas-snippet-dirs '("~/.config/emacs/snippets")))

  (add-hook 'org-mode-hook  'yas-minor-mode-on)
  (add-hook 'prog-mode-hook 'yas-minor-mode-on)
  (add-hook 'LaTeX-mode-hook 'yas-minor-mode-on)
#+end_src

*** Yasnippet-Snippets

Includes some default useful snippets.

#+begin_src emacs-lisp :tangle ./init.el
(use-package yasnippet-snippets
    :straight t)
#+end_src

** Autocompletion buffer

For this I use corfu. I used company before, but corfu seems faster, more minimal, renders better and uses more built-in features.

*** Corfu

#+begin_src emacs-lisp :tangle ./init.el
  (use-package corfu
    :straight (:files (:defaults "extensions/*"))

    :custom
    (corfu-cycle t)                       ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                        ;; Enable auto completion
    (corfu-separator ?\s)                 ;; Orderless field separator
    (corfu-quit-at-boundary 'separator)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)          ;; Never quit, even if there is no match
    (corfu-preview-current 'insert)       ;; Disable current candidate preview
    (corfu-preselect 'prompt)             ;; Preselect the prompt
    (corfu-on-exact-match nil)            ;; Configure handling of exact matches
    ;; (corfu-scroll-margin 5)            ;; Use scroll margin
    (corfu-auto-delay 0)
    (corfu-auto-prefix 1)

    (completion-cycle-threshold nil)
    (tab-always-indent 'complete)

    ;; (corfu-min-width 80)
    ;; (corfu-max-width corfu-min-width)

    ;; (lsp-completion-provider :none) ; Use corfu instead the default for lsp completions

    ;; :hook (lsp-completion-mode . kb/corfu-setup-lsp) ; Use corfu for lsp completion

    :config
    ;; Setup lsp to use corfu for lsp completion
    ;; (defun kb/corfu-setup-lsp ()
    ;;   "Use orderless completion style with lsp-capf instead of the
    ;; default lsp-passthrough."
    ;;   (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
    ;;         '(orderless)))

    :bind
    (:map corfu-map
          ("C-n" . #'corfu-next)
          ("C-p" . #'corfu-previous)
          ("<escape>" . #'corfu-quit)
          ("<return>" . #'corfu-insert)
          ("<return>" . #'corfu-complete)
          ("C-<tab>" . corfu-insert-separator)
          ("M-h" . #'corfu-popupinfo-documentation)
          ;; ("M-l" . #'corfu-show-location)
          )
          :init
          (global-corfu-mode)
          (corfu-popupinfo-mode))

;; (advice-add #'lsp-completion-at-point :around #'cape-wrap-noninterruptible)
#+end_src

*** kind-icon

Icons to show for autocompletion items.

#+begin_src emacs-lisp :tangle ./init.el
(use-package kind-icon
  :straight t
  :after corfu
  :custom
  (kind-icon-use-icons t)
  (kind-icon-default-face 'corfu-default) ; Have background color be the same as `corfu' face background
  (kind-icon-blend-background nil)  ; Use midpoint color between foreground and background colors ("blended")?
  (kind-icon-blend-frac 0.08)

  :config
  ;; enable kind-icon only in prog-mode
  (defun my/enable-kind-icon ()
    (setq-local corfu-margin-formatters '(kind-icon-margin-formatter)))
  :hook  ((prog-mode . my/enable-kind-icon))
  )
#+end_src

*** Cape

Package to manage what completions are enabled.

#+begin_src emacs-lisp :tangle ./init.el
(use-package cape
  :straight t
  ;; ;; Bind dedicated completion commands
  ;; ;; Alternative prefix keys: C-c p, M-p, M-+, ...
  ;; :bind (("C-c p p" . completion-at-point) ;; capf
  ;;        ("C-c p t" . complete-tag)        ;; etags
  ;;        ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
  ;;        ("C-c p h" . cape-history)
  ;;        ("C-c p f" . cape-file)
  ;;        ("C-c p k" . cape-keyword)
  ;;        ("C-c p s" . cape-symbol)
  ;;        ("C-c p a" . cape-abbrev)
  ;;        ("C-c p i" . cape-ispell)
  ;;        ("C-c p l" . cape-line)
  ;;        ("C-c p w" . cape-dict)
  ;;        ("C-c p \\" . cape-tex)
  ;;        ("C-c p _" . cape-tex)
  ;;        ("C-c p ^" . cape-tex)
  ;;        ("C-c p &" . cape-sgml)
  ;;        ("C-c p r" . cape-rfc1345))
  :init
  ;; Add `completion-at-point-functions', used by `completion-at-point'.
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  ;; (add-to-list 'completion-at-point-functions #'cape-file)
  ;;(add-to-list 'completion-at-point-functions #'cape-history)
  (add-to-list 'completion-at-point-functions #'cape-keyword)
  (add-to-list 'completion-at-point-functions #'cape-tex)
  ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
  ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
  (add-to-list 'completion-at-point-functions #'cape-abbrev)
  ;; (add-to-list 'completion-at-point-functions #'cape-ispell)
  ;; (add-to-list 'completion-at-point-functions #'cape-dict)
  ;;(add-to-list 'completion-at-point-functions #'cape-symbol)
  ;; (add-to-list 'completion-at-point-functions #'cape-line)
)
#+end_src

** Minibuffer

*** Vertico

Show candidates as you type.

#+begin_src emacs-lisp :tangle ./init.el
(use-package vertico
  :straight t
  :custom
  (vertico-cycle t)
  :init
  (vertico-mode))
#+end_src

*** Savehist

Show most recent commands higher.

#+begin_src emacs-lisp :tangle ./init.el
(use-package savehist
    :straight t
  :init
  (savehist-mode))
#+end_src

*** Marginalia

Displays a small sentence describing what the command does.

#+begin_src emacs-lisp :tangle ./init.el
(use-package marginalia
  :after vertico
  :straight t
  :custom
  (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
  :init
  (marginalia-mode))
#+end_src

*** Orderless

Enables fuzzy searching.

#+begin_src emacs-lisp :tangle ./init.el
(use-package orderless
  :straight t
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

** Shells and terminal emulation

*** Vterm

#+begin_src emacs-lisp :tangle ./init.el
(use-package vterm
  :straight t)
#+end_src

*** Eshell

Turns =eshell='s prompt to a =λ=.

#+begin_src emacs-lisp :tangle ./init.el
(setq eshell-prompt-function
      (lambda ()
        (concat
         (propertize "λ " 'face `(:foreground "medium orchid") 'rear-nonsticky t))))

(setq eshell-prompt-regexp "[#λ] ")
(setq eshell-highlight-prompt nil)
(setq eshell-banner-message "\n")
#+end_src

** File handling

*** OpenWith

Allows to match programs with filetypes and open files with those programs instead of Emacs.

#+begin_src emacs-lisp :tangle ./init.el
(use-package openwith
  :straight (:host github :repo "thisirs/openwith")
  :config
  (setq openwith-associations '(("\\.pdf\\'" "setsid -w xdg-open" (file))
                                ;; ("\\.html\\'" "firefox" (file))
                                ("\\.mp4\\'" "setsid -w xdg-open" (file))
                                ("\\.mkv\\'" "setsid -w xdg-open" (file))
                                ))
  (openwith-mode t))
#+end_src

** Web

*** Eww

  Emacs has an awesome built-in browser called EWW (Emacs Web Wowser). Not the greatest name, but it gets the job done.

  This makes EWW automatically rename EWW buffers once the page is rendered.

  #+begin_src emacs-lisp :tangle ./init.el
(setq eww-auto-rename-buffer t)
  #+end_src

*** Elpher

A browser for the gemini and gopher protocols.

#+begin_src emacs-lisp :tangle ./init.el
(use-package elpher
  :straight t)
#+end_src

** Keybinds

*** Move-Text

#+begin_src emacs-lisp :tangle ./init.el
(use-package move-text
  :straight t)

(global-set-key (kbd "M-S-<up>") 'move-text-line-up)
(global-set-key (kbd "M-S-<down>") 'move-text-line-down)
#+end_src

*** Shift-number

Allows to change the first number after the cursor on the same line.

#+begin_src emacs-lisp :tangle ./init.el
(use-package shift-number
  :straight t)

(global-set-key (kbd "C-+") 'shift-number-up)
(global-set-key (kbd "C--") 'shift-number-down)
#+end_src

*** Which-Key

When you start a key-chord and don't finish it, =which-key= shows you available keybinds.

#+begin_src emacs-lisp :tangle ./init.el
(use-package which-key
  :straight t
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 1.5))
#+end_src

*** Embark

Depending on where the cursor is, =embark= shows you available actions and displays a keymap with each one matched to a key.

#+begin_src emacs-lisp :tangle ./init.el
   (use-package embark
     :straight t

     :bind
     (("C-." . embark-act)         ;; pick some comfortable binding
      ("M-." . embark-dwim)        ;; good alternative: M-.
      ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

     :init

     ;; Optionally replace the key help with a completing-read interface
     (setq prefix-help-command #'embark-prefix-help-command)

     :config

     ;; ;; Hide the mode line of the Embark live/completions buffers
     ;; (add-to-list 'display-buffer-alist
     ;;              '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
     ;;                nil
     ;;                (window-parameters (mode-line-format . none))))
     )
#+end_src

**** Citar-Embark

Integration with the citar package.

#+begin_src emacs-lisp :tangle ./init.el
(use-package citar-embark
  :straight t
  :after citar embark
  :no-require
  :config (citar-embark-mode))
#+end_src

** LaTeX

Even though I personally don't write much latex anymore ---since I write my documents in org-mode and if need be I export to latex---, the following configuration is used rarely. But nonetheless, it makes Emacs a powerful latex editor.

#+begin_src emacs-lisp :tangle ./init.el
(straight-use-package 'auctex)

(setq-default TeX-master nil)
(setq TeX-auto-save t)
(setq TeX-parse-self t)
;; (setq TeX-command-extra-options "-shell-escape -interaction=nonstopmode")
(setq-default TeX-engine 'luatex)
;; (setq-default TeX-PDF-mode t)
(setq TeX-source-correlate-mode t)
(setq TeX-view-program-list '(("Evince" "evince --page-index=%(outpage) %o")))
(setq TeX-view-program-selection '((output-pdf "Evince")))
(setq font-latex-fontify-script nil)
(add-hook 'LaTeX-mode-hook (lambda () (visual-line-mode t)))
(add-hook 'LaTeX-mode-hook 'prettify-symbols-mode)
#+end_src

*** AucTeX-LaTeXmk

Adds LatexMk support to AUCTeX.

#+begin_src emacs-lisp :tangle ./init.el
(use-package auctex-latexmk
  :straight t)
(auctex-latexmk-setup)
#+end_src

*** RefTeX

A package that helps manage references in tex files.

#+begin_src emacs-lisp :tangle ./init.el
;; Turn on RefTeX in AUCTeX
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)
;; Activate nice interface between RefTeX and AUCTeX
(setq reftex-plug-into-AUCTeX t)
#+end_src

*** CDLaTeX

Speeds up typing latex. Also works in org-mode.

#+begin_src emacs-lisp :tangle ./init.el
(use-package cdlatex
  :straight t)

(add-hook 'org-mode-hook #'turn-on-org-cdlatex)
(add-hook 'LaTeX-mode-hook #'turn-on-cdlatex)   ; with AUCTeX LaTeX mode
(add-hook 'latex-mode-hook #'turn-on-cdlatex)   ; with Emacs latex mode

(global-set-key (kbd "C-c e") #'cdlatex-environment)
#+end_src

*** latex-from-calc

Source: https://karthinks.com/software/latex-input-for-impatient-scholars/#fnref:5

#+begin_src emacs-lisp :tangle ./init.el
  (defun latex-math-from-calc ()
    "Evaluate `calc' on the contents of line at point."
    (interactive)
    (cond ((region-active-p)
           (let* ((beg (region-beginning))
                  (end (region-end))
                  (string (buffer-substring-no-properties beg end)))
             (kill-region beg end)
             (insert (calc-eval `(,string calc-language latex
                                          calc-prefer-frac t
                                          calc-angle-mode rad)))))
          (t (let ((l (thing-at-point 'line)))
               (end-of-line 1) (kill-line 0)
               (insert (calc-eval `(,l
                                    calc-language latex
                                    calc-prefer-frac t
                                    calc-angle-mode rad)))))))

  (define-key LaTeX-mode-map (kbd "C-S-e") 'latex-math-from-calc)
  ;; (define-key org-mode-map (kbd "C-S-e") 'latex-math-from-calc)
#+end_src

** Spell checking

Since I write a lot of prose, spell checking is a must for any text editor.

*** Flyspell

Combines both Greek and English dictionaries.

#+begin_src emacs-lisp :tangle ./init.el
  (with-eval-after-load "ispell"
    (setq ispell-program-name "hunspell")
    (setq ispell-dictionary "el_GR,en_US")
    (ispell-set-spellchecker-params)
    (ispell-hunspell-add-multi-dic "el_GR,en_US")
    (setq ispell-personal-dictionary "~/.hunspell_personal"))

(add-hook 'org-mode-hook (lambda () (flyspell-mode 1)))
;; (add-hook 'prog-mode-hook (lambda () (flyspell-prog-mode 1)))
#+end_src

** Dictionary

#+begin_src emacs-lisp :tangle ./init.el
(global-set-key (kbd "M-#") #'dictionary-lookup-definition)
#+end_src

#+begin_src emacs-lisp :tangle ./init.el
(setq dictionary-server "dict.org")
#+end_src

#+begin_src emacs-lisp :tangle ./init.el
;; mandatory, as the dictionary misbehaves!
(setq switch-to-buffer-obey-display-actions t)
(add-to-list 'display-buffer-alist
   '("^\\*Dictionary\\*" display-buffer-in-side-window
     (side . right)
     (window-width . 0.45)))
#+end_src

** Writing

*** Olivetti

Centers text in the buffer.

#+begin_src emacs-lisp :tangle ./init.el
(setq-default olivetti-body-width 130)
(setq-default olivetti-margin-width 0)
(use-package olivetti
  :straight t
  :hook
  (org-mode . olivetti-mode)
  (markdown-mode . olivetti-mode)
  (Info-mode . olivetti-mode)
  (elpher-mode . olivetti-mode)
  (eww-mode . olivetti-mode)
  (TeX-mode . olivetti-mode)
  (tex-mode . olivetti-mode)
  (LaTeX-mode . olivetti-mode)
  (latex-mode . olivetti-mode))
#+end_src

** Bibliography management

*** Citar

Reads Bibliography from the =.bib= file that Zotero exports and allows inserting it in org-mode and latex buffers, viewing the associated files, making notes on the entry etc.

#+begin_src emacs-lisp :tangle ./init.el
        (use-package citar
          :straight t
          :after org
          :bind (("C-c b" . citar-insert-citation)
                 ;; :map minibuffer-local-map
                 ;; ("M-b" . citar-insert-preset)
                 )
          :custom
          (citar-bibliography '("~/Textfiles/biblio.bib"))
          :config
            (defvar citar-indicator-files-icons
    (citar-indicator-create
     :symbol (all-the-icons-faicon
              "file-o"
              :face 'all-the-icons-green
              :v-adjust -0.1)
     :function #'citar-has-files
     :padding "  " ; need this because the default padding is too low for these icons
     :tag "has:files"))

  (defvar citar-indicator-links-icons
    (citar-indicator-create
     :symbol (all-the-icons-octicon
              "link"
              :face 'all-the-icons-orange
              :v-adjust 0.01)
     :function #'citar-has-links
     :padding "  "
     :tag "has:links"))

  (defvar citar-indicator-notes-icons
    (citar-indicator-create
     :symbol (all-the-icons-material
              "speaker_notes"
              :face 'all-the-icons-blue
              :v-adjust -0.3)
     :function #'citar-has-notes
     :padding "  "
     :tag "has:notes"))

  (defvar citar-indicator-cited-icons
    (citar-indicator-create
     :symbol (all-the-icons-faicon
              "circle-o"
              :face 'all-the-icon-green)
     :function #'citar-is-cited
     :padding "  "
     :tag "is:cited"))

    (setq citar-indicators
    (list citar-indicator-files-icons
          citar-indicator-links-icons
          citar-indicator-notes-icons
          citar-indicator-cited-icons)))

        ;; (setq citar-symbols
        ;;       `((file ,(all-the-icons-faicon "file-o" :face 'all-the-icons-green :v-adjust -0.1) . " ")
        ;;         (note ,(all-the-icons-material "speaker_notes" :face 'all-the-icons-blue :v-adjust -0.3) . " ")
        ;;         (link ,(all-the-icons-octicon "link" :face 'all-the-icons-orange :v-adjust 0.01) . " ")))
        ;; (setq citar-symbol-separator "  ")
#+end_src

**** Citar-capf

Adds autocompletion for bibliography entries.

#+begin_src emacs-lisp :tangle ./init.el
;; (require 'citar-capf)

(add-hook 'completion-at-point-functions
          #'citar-capf
          'append)
#+end_src

**** Citar-Org-Roam

Compatibility layer that allows the citar notes to be part of org-roam.

#+begin_src emacs-lisp :tangle ./init.el
(use-package citar-org-roam
  :straight t
  :after citar org-roam org
  :no-require
  :config (citar-org-roam-mode))
#+end_src

** Version control

*** Magit

A front-end for using git. Very powerful, provides complicated actions at the press of a button.

#+begin_src emacs-lisp :tangle ./init.el
(use-package magit
    :straight t
    :commands magit-status)
#+end_src

** File management

*** Dired

Dired is the default file viewer of Emacs. It is very powerful in and of itself, but the following configuration extends its capabilities even more.

#+begin_src emacs-lisp :tangle ./init.el
(put 'dired-find-alternate-file 'disabled nil)
(add-hook 'dired-mode-hook (lambda () (hl-line-mode 1)))
#+end_src

*** Dired-Hide-Dotfiles

Allows you to hide dotfiles in dired by default and toggle them.

#+begin_src emacs-lisp :tangle ./init.el
(use-package dired-hide-dotfiles
  :straight t)

(defun my-dired-mode-hook ()
  "My `dired' mode hook."
  ;; To hide dot-files by default
  (dired-hide-dotfiles-mode))

;; To toggle hiding
(define-key dired-mode-map "." #'dired-hide-dotfiles-mode)
(add-hook 'dired-mode-hook #'my-dired-mode-hook)
#+end_src

*** Dired-copy-paste

#+begin_src emacs-lisp :tangle ./init.el
(use-package dired-copy-paste
  :straight (dired-copy-paste :type git :host github :repo "jsilve24/dired-copy-paste"))

(define-key dired-mode-map "\C-c\C-x" 'dired-copy-paste-do-cut)
(define-key dired-mode-map "\C-c\C-c" 'dired-copy-paste-do-copy)
(define-key dired-mode-map "\C-c\C-v" 'dired-copy-paste-do-paste)
#+end_src

** Aesthetic enhancements

This part consists of packages that make Emacs prettier.

*** Dashboard

Provides a start-up welcome screen for Emacs.

#+begin_src emacs-lisp :tangle ./init.el
(use-package dashboard
  :straight t
  :config
  ;; Set the banner
  (setq dashboard-startup-banner "/home/kchou/.config/emacs/logos/gnu-emacs.svg")
  ;; Value can be
  ;; 'official which displays the official emacs logo
  ;; 'logo which displays an alternative emacs logo
  ;; 1, 2 or 3 which displays one of the text banners
  ;; "path/to/your/image.png" or "path/to/your/text.txt" which displays whatever image/text you would prefer
  ;; Content is not centered by default. To center, set
  (setq dashboard-set-navigator t)
  (setq dashboard-center-content t)
  (setq dashboard-banner-logo-title nil)
  (setq dashboard-show-shortcuts nil)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-set-init-info nil)
  (setq dashboard-set-footer nil)
  (setq dashboard-week-agenda nil)
  (setq dashboard-page-separator "\n\n")
  (setq dashboard-items '(;;(bookmarks . 20)
                          ;; (recents . 5)
                          ;; (agenda . 10)
                          ))

  (dashboard-setup-startup-hook))

(setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
#+end_src

*** Rainbow-Mode

Colors hex values accordingly.

#+begin_src emacs-lisp :tangle ./init.el
(use-package rainbow-mode
  :straight t)
#+end_src

*** Rainbow-Delimeters

Colors the same color matching delimeters.

#+begin_src emacs-lisp :tangle ./init.el
(use-package rainbow-delimiters
  :straight t
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

*** Beacon-Mode

When switching to a new window or buffer, the line that the cursor is located flashes, making it easier to locate.

#+begin_src emacs-lisp :tangle ./init.el
(use-package beacon
    :straight t)

(beacon-mode)
#+end_src

*** Telephone Line

#+begin_src emacs-lisp :tangle ./init.el
(use-package telephone-line
  :straight t)

(require 'telephone-line-utils)

(setq telephone-line-lhs '((modal telephone-line-project-segment)
 (accent telephone-line-vc-segment telephone-line-erc-modified-channels-segment telephone-line-process-segment)
 (nil telephone-line-buffer-segment)))

(setq telephone-line-rhs '((nil telephone-line-flymake-segment telephone-line-misc-info-segment)
 (accent telephone-line-major-mode-segment)
 (evil telephone-line-airline-position-segment)))

(telephone-line-mode 1)
#+end_src

** Media consumption

*** RSS

**** Elfeed-Org

Allows to specify your RSS feeds with an org-file, instead of appending links to a variable.

#+begin_src emacs-lisp :tangle ./init.el
  (use-package elfeed-org
    :straight t
    :after org)

  (elfeed-org)
  (setq rmh-elfeed-org-files (list "~/.config/emacs/feeds.org"))
#+end_src

**** Elfeed

An RSS reader.

#+begin_src emacs-lisp :tangle ./init.el
(use-package elfeed
  :straight t)

(setq-default elfeed-search-filter '"+unread")
(setq-default elfeed-db-directory '"~/.config/elfeed")

(global-set-key (kbd "C-x w") 'elfeed)

(defun browse-url-mpv (url &optional new-window)
  (start-process "mpv" "*mpv*" "mpv" url))

(setq browse-url-handlers '(("https:\\/\\/www\\.youtube." . browse-url-mpv) ("." . browse-url-firefox)))
#+end_src

***** eww integration

A function to open the link at point in EWW.

#+begin_src emacs-lisp :tangle ./init.el
(defun elfeed-eww-open (&optional use-generic-p)
  "open with eww"
  (interactive "P")
  (let ((entries (elfeed-search-selected)))
    (cl-loop for entry in entries
             do (elfeed-untag entry 'unread)
             when (elfeed-entry-link entry)
             do (eww-browse-url it))
    (mapc #'elfeed-search-update-entry entries)
    (unless (use-region-p) (forward-line))))

(define-key elfeed-search-mode-map (kbd "w") 'elfeed-eww-open)
#+end_src

*** Epub

**** Nov.el

A package to read =.epub= documents inside Emacs.

#+begin_src emacs-lisp :tangle ./init.el
(use-package nov
  :straight t)

(add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
(setq nov-text-width t)
(add-hook 'nov-mode-hook 'olivetti-mode)
#+end_src

** Spaced Repetition Systems

*** Anki-Editor

Allows to create anki cards from org-mode nodes and sync them with anki.

#+begin_src emacs-lisp :tangle ./init.el
(setq-default anki-editor-use-math-jax t)

(use-package anki-editor
  :straight t
  :after org
  :bind (:map org-mode-map
              ("<f12>" . anki-editor-cloze-region-auto-incr)
              ("<f11>" . anki-editor-cloze-region-dont-incr)
              ("<f10>" . anki-editor-reset-cloze-number)
              ("<f9>"  . anki-editor-push-tree))
  :hook (org-capture-after-finalize . anki-editor-reset-cloze-number) ; Reset cloze-number after each capture.
  :config
  (setq anki-editor-create-decks nil ;; Allow anki-editor to create a new deck if it doesn't exist
        anki-editor-org-tags-as-anki-tags t
        )

  (defun anki-editor-cloze-region-auto-incr (&optional arg)
    "Cloze region without hint and increase card number."
    (interactive)
    (anki-editor-cloze-region my-anki-editor-cloze-number "")
    (setq my-anki-editor-cloze-number (1+ my-anki-editor-cloze-number))
    (forward-sexp))

  (defun anki-editor-cloze-region-dont-incr (&optional arg)
    "Cloze region without hint using the previous card number."
    (interactive)
    (anki-editor-cloze-region (1- my-anki-editor-cloze-number) "")
    (forward-sexp))

  (defun anki-editor-reset-cloze-number (&optional arg)
    "Reset cloze number to ARG or 1"
    (interactive)
    (setq my-anki-editor-cloze-number (or arg 1)))

  (defun anki-editor-push-tree ()
    "Push all notes under a tree."
    (interactive)
    (anki-editor-push-notes '(4))
    (anki-editor-reset-cloze-number))

  ;; Initialize
  (anki-editor-reset-cloze-number)
)
#+end_src

** Finance

Utilities to manage my PTA (Plain Text Accounting) files.

*** Beancount-mode

#+begin_src emacs-lisp :tangle ./init.el
   (use-package beancount-mode
     :straight (:host github :repo "beancount/beancount-mode"))

   ;; ;; Automatically open .beancount files in beancount-mode.
   ;; (add-to-list 'auto-mode-alist '("\\.beancount$" . beancount-mode))

   ;; ;; Make sure we don't accidentally pick up ;;; as headers. Use org section headers only.
   ;; (setq beancount-outline-regexp "\\(\\*+\\)")

   ;; ;; Automatically enable outline-mode.
   ;; (add-hook 'beancount-mode-hook #'outline-minor-mode)

   ;; ;; Add movement between sections.
   ;; (define-key beancount-mode-map [(control c)(control n)] #'outline-next-visible-heading)
   ;; (define-key beancount-mode-map [(control c)(control p)] #'outline-previous-visible-heading)
   ;; (define-key beancount-mode-map [(control c)(control u)] #'outline-up-heading)
#+end_src

** Mail

Trying it out for now.

#+begin_src emacs-lisp :tangle ./init.el
(setq message-signature
              (with-temp-buffer
                (shell-command "fortune" t)
                ;; (let ((comment-start ";;"))
                ;;   (comment-region (point-min) (point-max)))
                (concat "\n" (buffer-string))))
#+end_src

*** Notmuch

#+begin_src emacs-lisp :tangle ./init.el
;; (autoload 'notmuch "notmuch" "notmuch mail" t)
(require 'notmuch)
(setq notmuch-search-oldest-first nil)
(setq message-kill-buffer-on-exit t)
(setq notmuch-multipart/alternative-discouraged '("text/plain" "text/html"))
(setq notmuch-fcc-dirs "UoA/INBOX.Sent +sent -unread")
(setq notmuch-hello-thousands-separator ".")
(setq notmuch-search-oldest-first t)

(setq message-sendmail-envelope-from 'header)

(setq mail-user-agent 'notmuch-user-agent)

;;; General UI
(setq notmuch-show-logo nil)
(setq notmuch-hello-sections '(notmuch-hello-insert-header
                               notmuch-hello-insert-saved-searches
                               notmuch-hello-insert-search
                               ;; notmuch-hello-insert-recent-searches
                               notmuch-hello-insert-alltags
                               notmuch-hello-insert-footer
                               ))
(setq notmuch-show-all-tags-list t)

(global-set-key (kbd "C-x m") #'notmuch-mua-new-mail)

(load-file "~/.config/emacs/lisp/org-notmuch.el")
(require 'org-notmuch)

(global-set-key (kbd "C-c m") 'notmuch)
#+end_src

*** org-msg

#+begin_src emacs-lisp :tangle ./init.el
(use-package org-msg
  :straight t
  :after org
  :config

  (add-hook 'org-msg-edit-mode-hook (lambda () (corfu-mode -1)))

  (setq org-msg-options "html-postamble:nil H:3 num:nil ^:{} toc:nil author:nil email:nil \\n:t tex:dvisvgm"
	    org-msg-startup "inlineimages overview"
	    org-msg-greeting-fmt nil
	    org-msg-greeting-name-limit 3
	    org-msg-default-alternatives '((new	. (text html))
				                       (reply-to-html . (text html))
				                       (reply-to-text . (text)))
        org-msg-posting-style nil
    	org-msg-convert-citation t
        org-msg-signature t)

  (org-msg-mode))

;; (add-hook 'message-mode-hook #'org-msg-edit-mode)

;; (defun +org-msg-separate-mml-and-org/remove-empty-mml (orig &rest args)
;;   (cl-multiple-value-bind (mml org)
;;       (apply orig args)
;;     (cl-values
;;      (if (string-empty-p mml)
;;          nil
;;        mml)
;;      org)))
;; (advice-add 'org-msg-separate-mml-and-org :around '+org-msg-separate-mml-and-org/remove-empty-mml)
#+end_src

*** msmtp

#+begin_src emacs-lisp :tangle ./init.el
;; msmtp
(setq user-mail-address "sdi2000215@di.uoa.gr"
      send-mail-function 'sendmail-send-it
      sendmail-program "/usr/bin/msmtp"
      mail-specify-envelope-from t)
#+end_src

*** fortune

#+begin_src emacs-lisp :tangle ./init.el
(setq fortune-dir "/usr/share/games/fortune")
(setq fortune-file "/usr/share/games/fortune/sports")
#+end_src

** Markdown

#+begin_src emacs-lisp :tangle ./init.el
(use-package markdown-mode
  :straight t)
#+end_src

** Org

This behemoth of a node contains all my configuration regarding org-mode.

*** Org

#+begin_src emacs-lisp :tangle ./init.el
  (use-package org
    :straight (org :type git :repo "https://git.tecosaur.net/tec/org-mode.git") ; (org :type built-in)
    :commands (org-capture org-agenda)
    :config
    (setq org-hide-emphasis-markers t
          org-ellipsis "…"
          org-startup-indented t
          org-pretty-entities nil
          org-support-shift-select t
          org-fontify-whole-heading-line t
          org-fontify-done-headline t
          org-startup-with-inline-images t
          org-fontify-quote-and-verse-blocks t
          org-deadline-warning-days 30
          org-log-done 'time
          org-log-into-drawer t
          org-auto-align-tags nil
          org-tags-column 0
          org-return-follows-link t
          org-agenda-show-outline-path 'title
          org-refile-use-outline-path 'title))

  (add-hook 'org-mode-hook (lambda () (visual-line-mode t)))

  (setq org-link-frame-setup '((vm . vm-visit-folder-other-frame)
                               (vm-imap . vm-visit-imap-folder-other-frame)
                               (gnus . org-gnus-no-new-news)
                               (file . find-file)
                               (wl . wl-other-frame)))

  (with-eval-after-load 'org
    (add-to-list 'org-modules 'org-habit t))

  (setq org-cite-global-bibliography '("/home/kchou/Textfiles/biblio.bib"))

  (setq org-image-actual-width (list 700))

  (setq org-link-file-path-type 'relative)
#+end_src

*** Org-Agenda

Settings for org-agenda.

#+begin_src emacs-lisp :tangle ./init.el
(setq org-agenda-block-separator "\n"
      org-agenda-start-with-log-mode t
      org-agenda-use-time-grid t
      org-agenda-include-deadlines t
      org-agenda-current-time-string "⭠ now ─────────────────────────────────────────────────"
      org-agenda-span 'week
      org-extend-today-until 4
      org-directory "~/Textfiles/Org files"
      org-agenda-files
      '("Tasks.org"
        "Courses.org"
        "Habits.org"
        "Inbox.org"
        "Phone inbox.org"
        )
      org-tag-alist (quote (
                            ("@home" . ?1)
                            ("@uni" . ?2)
                            ("@school" . ?3)
                            (:newline)
                            (:newline)
                            ("errand" . ?e)
                            ("work" . ?w)
                            ("health" . ?h)
                            ("social" . ?s)
                            ("music" . ?m)
                            (:newline)
                            ("productivity" . ?p)
                            ("uni" . ?u)
                            ("courses" . ?c)
                            ("homework" . ?a)
                            (:newline)
                            ("hobbies" . ?x)
                            ("tech" . ?t)
                            (:newline)
                            (:newline)
                            ("WAITING" . ?W)
                            ("HOLD" . ?H)
                            ("CANCELLED" . ?C)
                            ("RUNNING" . ?R)
                            ))
      )

(global-set-key (kbd "C-c a") 'org-agenda)
#+end_src

*** Org-Export

Settings regarding the various export features of org-mode.

#+begin_src emacs-lisp :tangle ./init.el
;; (setq org-export-backends '(texinfo md man beamer latex html ascii))
#+end_src

#+begin_src emacs-lisp :tangle ./init.el
(setq org-publish-timestamp-directory '"~/.config/emacs/org-timestamps")
#+end_src

This directory contains =.csl= files, to be used when using the =csl= backend for exporting citations.

#+begin_src emacs-lisp :tangle ./init.el
(custom-set-variables
 '(org-cite-csl-styles-dir "/home/kchou/HDD/Έγγραφα/Zotero/styles"))
#+end_src

When exporting to latex, use =biblatex= as the citation backend, else use =csl=.

#+begin_src emacs-lisp :tangle ./init.el
(setq org-cite-export-processors
       '((latex . (biblatex))
         (t . (csl "ieee.csl"))
         ))
#+end_src

**** HTML Export

Settings for exporting to html.

#+begin_src emacs-lisp :tangle ./init.el
(setq org-html-validation-link nil)
(setq org-html-head-include-default-style t)
(setq org-html-head-include-scripts t)
(setq org-html-metadata-timestamp-format "%A, %d %b %Y")
(setq org-html-head "<link rel=\"stylesheet\" href=\"/home/kchou/.config/emacs/HTML/worg.css\"/>")
#+end_src

***** Htmlize

Code highlighting using Emacs when exporting to html.

#+begin_src emacs-lisp :tangle ./init.el
(use-package htmlize
  :straight t)
#+end_src

**** Org-Reveal

Exporter for [[https://revealjs.com/][Reveal.js]].

#+begin_src emacs-lisp :tangle ./init.el
(use-package ox-reveal
  :straight t)
#+end_src

**** Org-Latex

Settings for when exporting to latex.

#+begin_src emacs-lisp :tangle ./init.el
(setq org-latex-precompile nil)

(setq org-src-preserve-indentation t)
(setq indent-tabs-mode nil)
(setq org-latex-caption-above '(table))

(add-hook 'org-mode-hook
          '(lambda ()
             (delete '("\\.pdf\\'" . default) org-file-apps)
             (add-to-list 'org-file-apps '("\\.pdf\\'" . "xdg-open %s"))))

;; For syntax highlighting in exported code blocks
;; !!Needs python-pygments installed!!
(setq
 org-latex-listings 'minted
 org-latex-pdf-process
 '("latexmk -f -output-directory=%o %f"))

(setq org-export-with-smart-quotes t)

(setq org-latex-hyperref-template "\\hypersetup{
pdfauthor={%a},
pdftitle={%t},
pdfkeywords={%k},
pdfsubject={%d},
pdfcreator={%c},
pdflang={%L},
colorlinks,
linkcolor=blue,
citecolor=red,
urlcolor=blue}")
#+end_src

**** org-contrib

Enable some functions from the =contrib= part of org-mode.

#+begin_src emacs-lisp :tangle ./init.el
(use-package org-contrib
  :straight t)

(require 'ox-extra)
(ox-extras-activate '(ignore-headlines))
#+end_src

**** Ox-Hugo

Export to markdown files to create a website using [[https://gohugo.io/][Hugo]].

#+begin_src emacs-lisp :tangle ./init.el
(use-package ox-hugo
  :straight t
  :after ox)

(setq org-hugo-base-dir (expand-file-name "~/Repos/My repos/Site"))
(setq org-hugo-default-section-directory "posts")
(setq org-hugo-front-matter-format "yaml")
(setq org-hugo-use-code-for-kbd t)
#+end_src

This function exports all org files in a directory---recursively---with ox-hugo.

#+begin_src emacs-lisp :tangle ./init.el
(defun ox-hugo/export-all (&optional org-files-root-dir dont-recurse)
  "Export all Org files (including nested) under ORG-FILES-ROOT-DIR.

All valid post subtrees in all Org files are exported using
`org-hugo-export-wim-to-md'.

If optional arg ORG-FILES-ROOT-DIR is nil, all Org files in
current buffer's directory are exported.

If optional arg DONT-RECURSE is nil, all Org files in
ORG-FILES-ROOT-DIR in all subdirectories are exported. Else, only
the Org files directly present in the current directory are
exported.  If this function is called interactively with
\\[universal-argument] prefix, DONT-RECURSE is set to non-nil.

Example usage in Emacs Lisp: (ox-hugo/export-all \"~/org\")."
  (interactive)
  (setq org-hugo-base-dir "./site")
  (let* ((org-files-root-dir (or org-files-root-dir default-directory))
         (dont-recurse (or dont-recurse (and current-prefix-arg t)))
         (search-path (file-name-as-directory (expand-file-name org-files-root-dir)))
         (org-files (if dont-recurse
                        (directory-files search-path :full "\.org$")
                      (directory-files-recursively search-path "\.org$")))
         (num-files (length org-files))
         (cnt 1))
    (if (= 0 num-files)
        (message (format "No Org files found in %s" search-path))
      (progn
        (message (format (if dont-recurse
                             "[ox-hugo/export-all] Exporting %d files from %S .."
                           "[ox-hugo/export-all] Exporting %d files recursively from %S ..")
                         num-files search-path))
        (dolist (org-file org-files)
          (with-current-buffer (find-file-noselect org-file)
            (message (format "[ox-hugo/export-all file %d/%d] Exporting %s" cnt num-files org-file))
            (org-hugo-export-wim-to-md :all-subtrees)
            (setq cnt (1+ cnt))))
        (message "Done!")))))
#+end_src

*** Org Bookmarks

#+begin_src emacs-lisp :tangle ./init.el
(setq org-bookmark-names-plist '(:last-capture nil :last-refile nil :last-capture-marker nil))
#+end_src

*** Org-Capture

#+begin_src emacs-lisp :tangle ./init.el
(setq org-default-notes-file "Inbox.org")

(global-set-key (kbd "C-c c") #'org-capture)

(setq org-capture-bookmark nil)

(setq org-capture-templates
      '(
        ("i" "inbox" entry (file "Inbox.org")
         "* TODO %?")
        ;; ;; todo's for my regular agenda files
        ;; ("t" "Todo" entry (file+headline "~/Textfiles/Org files/Tasks.org" "Capture")
        ;;  "* TODO %?")
        ;; ;; tasks related to uni
        ;; ("u" "Uni" entry (file "~/Textfiles/Org files/Courses.org")
        ;;  "* TODO %?")
        ;; ;; thought capture for org-roam
        ;; ("s" "slipbox" entry (file "~/Textfiles/Braindump/slipbox.org")
        ;;  "* %?")
        ("c" "org-protocol-capture" entry (file "Inbox.org")
         "* [[%:link][%:description]]\n\n %i"
         :empty-lines 1
         :immediate-finish t)
        ("w" "word" plain (file "~/Textfiles/Braindump/pages/noteworthy_words.org")
         "- %? :: "
         :empty-lines 1)
        ))
#+end_src

*** Org-refile

#+begin_src emacs-lisp :tangle ./init.el
(setq org-refile-targets `((nil :maxlevel . 5)
                           (,(directory-files-recursively "~/Textfiles/Org files/" "^[A-Za-zΑ-Ωα-ω0-9 ]*.org$") :maxlevel . 4)))

(setq org-outline-path-complete-in-steps nil)
(setq org-refile-use-outline-path 'file)
#+end_src

*** Org-store-link

#+begin_src emacs-lisp :tangle ./init.el
(global-set-key (kbd "C-c l") #'org-store-link)
#+end_src

*** Org-Timer

#+begin_src emacs-lisp :tangle ./init.el
(setq org-clock-sound "~/.config/emacs/clock.wav")
#+end_src

*** Oxr

Autocomplete for figures in file.

#+begin_src emacs-lisp :tangle ./init.el
(use-package oxr
  :straight (oxr :type git :host github :repo "bdarcus/oxr")
  :bind
  (("C-c r" . oxr-insert-ref)))
#+end_src

*** org-cite-csl-activate

Render citations in Chicago-style.

#+begin_src emacs-lisp :tangle ./init.el
;; (use-package citeproc :straight t)
(use-package org-cite-csl-activate
  :straight (org-cite-csl-activate :type git :host github :repo "andras-simonyi/org-cite-csl-activate")
  :after org)

(add-hook 'org-mode-hook (lambda () (cursor-sensor-mode 1)))

(require 'oc-csl-activate)
(setq org-cite-activate-processor 'csl-activate)
;; (setq org-cite-csl-activate-use-citar-cache t)
#+end_src

*** Org-Download

Utility to paste screenshots or drag-and-drop images in the org buffer.

#+begin_src emacs-lisp :tangle ./init.el
(use-package org-download
  :straight t)

(setq org-download-image-org-width 500)

(global-set-key (kbd "s-y") #'org-download-clipboard)
#+end_src

*** Org-Babel

Enables you to execute source blocks in buffer.

**** Ob-Sagemath

#+begin_src emacs-lisp :tangle ./init.el
(use-package ob-sagemath
  :straight t)

;; Ob-sagemath supports only evaluating with a session.
(setq org-babel-default-header-args:sage '((:session . t)
                                           ;; (:results . "drawer")
                                           ))

;; ;; C-c c for asynchronous evaluating (only for SageMath code blocks).
;; (with-eval-after-load "org"
;;   (define-key org-mode-map (kbd "C-c c") 'ob-sagemath-execute-async))

;; ;; Do not confirm before evaluation
;; (setq org-confirm-babel-evaluate nil)

;; ;; Do not evaluate code blocks when exporting.
;; (setq org-export-babel-evaluate nil)

;; ;; Show images after evaluating code blocks.
;; (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
#+end_src

**** Ob-Prolog

#+begin_src emacs-lisp :tangle ./init.el
(use-package ob-prolog
  :straight (:host github :repo "ljos/ob-prolog"))

(setq org-babel-prolog-command "eclipse")
#+end_src

**** Global

#+begin_src emacs-lisp :tangle ./init.el
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp :tangle ./init.el . t)
   (C . t)
   (python . t)
   (octave . t)
   (R . t)
   (prolog . t)
   ;; (ditaa . t)
   ))
;; Show syntax highlighting per language native mode in *.org
(setq org-src-fontify-natively t)
;; For languages with significant whitespace like Python:
(setq org-src-preserve-indentation t)

(setq org-confirm-babel-evaluate nil)
#+end_src

*** Org-Transclusion

Provides transclusion of other org files.

#+begin_src emacs-lisp :tangle ./init.el
(use-package org-transclusion
  :straight t
  :config
  (add-to-list 'org-transclusion-extensions 'org-transclusion-indent-mode))

(define-key global-map (kbd "C-c t a") #'org-transclusion-add)
(define-key global-map (kbd "C-c t t") #'org-transclusion-mode)
#+end_src

*** Org-Plot

Gives the ability to create a plot from data in a org table.

#+begin_src emacs-lisp :tangle ./init.el
(use-package gnuplot-mode
  :straight t)

(use-package gnuplot
  :straight t)
#+end_src

*** Org-Pomodoro

#+begin_src emacs-lisp :tangle ./init.el
(use-package org-pomodoro
  :straight t)
(setq org-pomodoro-length 30)
(setq org-pomodoro-short-break-length 6)
(setq org-pomodoro-long-break-length 20)
(setq org-pomodoro-manual-break t)
(setq org-pomodoro-start-sound "~/.config/emacs/clock.wav")
(setq org-pomodoro-finished-sound "~/.config/emacs/clock.wav")
(setq org-pomodoro-short-break-sound "~/.config/emacs/clock.wav")
(setq org-pomodoro-long-break-sound "~/.config/emacs/clock.wav")
#+end_src

*** Org-Pandoc-Import

#+begin_src emacs-lisp :tangle ./init.el
(use-package org-pandoc-import
  :straight (:host github
             :repo "tecosaur/org-pandoc-import"
             :files ("*.el" "filters" "preprocessors")))
#+end_src

*** Zotero links

Open =zotero://= links from org buffers.

#+begin_src emacs-lisp :tangle ./init.el
(defun org-zotero-open (path)
  (browse-url-xdg-open (format "zotero:%s" path)))

(with-eval-after-load 'org
  (org-link-set-parameters "zotero" :follow #'org-zotero-open))
#+end_src

*** Org-Crypt

Allows you to encrypt specific org headings, when tagged with =crypt=.

#+begin_src emacs-lisp :tangle ./init.el
(require 'org-crypt)

(with-eval-after-load "org-crypt"
  ;; Automatically encrypts everything that has the tag "crypt"
  ;; when you save the file
  (org-crypt-use-before-save-magic)
  (setq org-tags-exclude-from-inheritance '("crypt"))

  (setq org-crypt-key nil)
  ;; GPG key to use for encryption.
  ;; nil means  use symmetric encryption unconditionally.
  ;; "" means use symmetric encryption unless heading sets CRYPTKEY property.

  (setq auto-save-default nil)
  ;; Auto-saving does not cooperate with org-crypt.el: so you need to
  ;; turn it off if you plan to use org-crypt.el quite often.  Otherwise,
  ;; you'll get an (annoying) message each time you start Org.

  ;; To turn it off only locally, you can insert this:
  ;;
  ;; # -*- buffer-auto-save-file-name: nil; -*-
  )
#+end_src

*** Org-Analyzer

Provides a web interface to analyze clocked time data from your agenda files.

#+begin_src emacs-lisp :tangle ./init.el
(use-package org-analyzer
  :straight (:host github :repo "rksm/clj-org-analyzer"))
#+end_src

*** Org-Yt

Adds thumbnail of youtube video when there is a yt video link.

#+begin_src emacs-lisp :tangle ./init.el
(use-package org-yt
  :straight (:host github :repo "league/org-yt"))
#+end_src

*** Org-Web-Tools

Various functions for operations between html and org.

#+begin_src emacs-lisp :tangle ./init.el
(use-package org-web-tools
  :straight (:host github :repo "alphapapa/org-web-tools"))

(global-set-key (kbd "C-x p i") 'org-web-tools-insert-link-for-url)
#+end_src

*** Org-Modern

Prettifies org files.

#+begin_src emacs-lisp :tangle ./init.el
  (use-package org-modern
    :straight t
    :config
    (setq org-modern-table nil)
    (setq org-modern-block-fringe nil)
    ;; (setq org-modern-star '(""))
    :custom
    (org-modern-hide-stars nil) ; adds extra indentation
    :hook
    (org-mode . org-modern-mode)
    (org-agenda-finalize . org-modern-agenda))
#+end_src

*** Org-Modern-Indent

Makes code blocks pretty.

#+begin_src emacs-lisp :tangle ./init.el
  (use-package org-modern-indent
    :straight (:host github :repo "jdtsmith/org-modern-indent")
    :hook
    (org-mode . org-modern-indent-mode))
#+end_src

*** Org-Pretty-Table-Mode

Prettifies org tables.

#+begin_src emacs-lisp :tangle ./init.el
(use-package org-pretty-table
  :straight (:host github :repo "Fuco1/org-pretty-table")
  :hook (org-mode . org-pretty-table-mode))
#+end_src

*** Org-appear

Org mode provides a way to toggle visibility of hidden elements such as emphasis markers, links, etc. by customising specific variables, e.g., org-hide-emphasis-markers. However, it is currently not possible to do this interactively and on an element-by-element basis. This package, inspired by org-fragtog, enables automatic visibility toggling depending on cursor position. Hidden element parts appear when the cursor enters an element and disappear when it leaves.

#+begin_src emacs-lisp :tangle ./init.el
(use-package org-appear
  :straight t)
(add-hook 'org-mode-hook 'org-appear-mode)
(setq org-appear-trigger 'always)
#+end_src

*** Org-Remoteimg

This package displays remote images inline in org-mode with automatic caching. The next time you visit the file or fetch the image, it will be instantly fetched from the cache.

#+begin_src emacs-lisp :tangle ./init.el
(use-package org-remoteimg
  :straight (org-remoteimg :type git :host github :repo "gaoDean/org-remoteimg"))

;; optional: set this to wherever you want the cache to be stored
(setq url-cache-directory "~/.cache/emacs/url")

(setq org-display-remote-inline-images 'cache) ;; enable caching
#+end_src

*** Org-Roam

**** Org-Roam

Note taking, zettelkasten inspired system using org files and leveraging backlinks.

#+begin_src emacs-lisp :tangle ./init.el
(use-package org-roam
  :straight t

  :init
  (setq org-roam-v2-ack t)

  :custom
  (org-roam-directory "~/Textfiles/Braindump")
  (org-roam-dailies-directory "journals/")
  (org-roam-completion-everywhere t)

  (org-roam-dailies-capture-templates
   '(("d" "default" entry "* %<%H:%M>: %?"
      :empty-lines 1
      :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n#+filetags: :journal:\n\n"))))

  (org-roam-capture-ref-templates
   '(("r" "ref" plain "%?"
      :if-new (file+head "references/${slug}.org" "#+title: ${title}\n#+date: %U\n\n")
      :unnarrowed t)))

  (org-roam-capture-templates
   '(
     ("p" "page" plain "- subject :: %?"
      :if-new (file+head "pages/${slug}.org" "#+title: ${title}\n#+filetags: draft\n#+date: %U\n\n")
      :empty-lines 1
      :unnarrowed nil)
     ("P" "post" plain "%?"
      :if-new (file+head "articles/${title}.org" "#+title: ${title}\n#+date: %U\n#+hugo_base_dir: ~/Repos/My repos/Site\n#+hugo_section: ./posts\n#+hugo_auto_set_lastmod: t\n#+hugo_draft: true\n#+options: tex:verbatim\n\n")
      ;; :immediate-finish t
      :unnarrowed t)
     ))

  :bind (("C-c n b" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n g" . org-roam-graph)
         ("C-c n i" . org-roam-node-insert)
         ("C-c n I" . org-roam-node-insert-immediate)
         ("C-c n c" . org-roam-capture)
         ("C-c n t" . org-roam-tag-add)
         ("C-c n a" . org-roam-alias-add)
         ("C-c n r" . org-roam-ref-add)
         ("C-c n o" . org-id-get-create)
         :map org-mode-map
         ("C-M-i"    . completion-at-point))

  :bind-keymap
  ("C-c n d" . org-roam-dailies-map)

  :config
  ;; Creating the property “type” on my nodes
  (cl-defmethod org-roam-node-type ((node org-roam-node))
    "Return the TYPE of NODE."
    (condition-case nil
        (file-name-nondirectory
         (directory-file-name
          (file-name-directory
           (file-relative-name (org-roam-node-file node) org-roam-directory))))
      (error "")))

  ;; If you're using a vertical completion framework, you might want a more informative completion interface
  (setq org-roam-node-display-template (concat "${type:15} ${title:*} " (propertize "${tags:25}" 'face 'org-tag)))

  (org-roam-db-autosync-mode)
  (org-roam-update-org-id-locations)
  (org-roam-setup)
  (require 'org-roam-dailies)
  (require 'org-roam-protocol)
  (require 'org-roam-export)
  )
#+end_src

***** COMMENT Shows only the surrounding text instead of the whole file in the 'org-roam-buffer' backlinks

#+begin_src emacs-lisp :tangle no
(defun my/preview-fetcher ()
  (let* ((elem (org-element-context))
         (parent (org-element-property :parent elem)))
    ;; TODO: alt handling for non-paragraph elements
    (string-trim-right (buffer-substring-no-properties
                        (org-element-property :begin parent)
                        (org-element-property :end parent)))))

;; (setq org-roam-preview-function #'my/preview-fetcher)
#+end_src

***** Get 'org-roam-preview-visit' and friends to replace the main window. This should be applicable only when  'org-roam-mode' buffer is displayed in a side-window.

#+begin_src emacs-lisp :tangle ./init.el
(add-hook 'org-roam-mode-hook
          (lambda ()
            (setq-local display-buffer--same-window-action
                        '(display-buffer-use-some-window
                          (main)))))
#+end_src

***** Splits the frame vertically and gives specific amount of space to the 'org-roam-buffer'

#+begin_src emacs-lisp :tangle ./init.el
(add-to-list 'display-buffer-alist
             '("\\*org-roam\\*"
               (display-buffer-in-side-window)
               ;; (dedicated . t)
               (side . right)
               (slot . 0)
               (window-width . 0.33)
               (preserve-size . (t nil))
               (window-parameters . ((no-other-window . t)
                                     (no-delete-other-windows . t)))))
#+end_src

***** Maximizes org-capture buffer

#+begin_src emacs-lisp :tangle ./init.el
(add-hook 'org-capture-mode-hook 'delete-other-windows)
#+end_src

***** COMMENT Automatically open the *org-roam* buffer when visiting an org-roam file

#+begin_src emacs-lisp :tangle ./init.el
(defun tim/org-roam-buffer-show (_)
  (if (and
       ;; Don't do anything if we're in the minibuffer or in the calendar
       (not (minibufferp))
       (not (derived-mode-p 'calendar-mode))
       ;; Show org-roam buffer iff the current buffer has a org-roam file
       (xor (org-roam-file-p) (eq 'visible (org-roam-buffer--visibility))))
      (org-roam-buffer-toggle)))
(add-hook 'window-buffer-change-functions 'tim/org-roam-buffer-show)
#+end_src

***** Include org-roam todos in org-agenda

#+begin_src emacs-lisp :tangle ./init.el
(setq who/org-agenda-directory "~/Textfiles/Org files/")

(require 'find-lisp)
(defun who/find-org-files (directory)
  (find-lisp-find-files directory "\.org$"))

(defun who-org/agenda-files-update (&rest _)
  (let ((todo-zettels (->> "rg --files-with-matches '(TODO)|(NEXT)|(HOLD)|(WAITING)' ~/Textfiles/Braindump ~/Textfiles/Braindump/journals"
                           (shell-command-to-string)
                           (s-lines)
                           (-filter (lambda (line) (not (s-blank? line)))))))
    (setq org-agenda-files (append (who/find-org-files who/org-agenda-directory) todo-zettels))))

(advice-add 'org-agenda :before #'who-org/agenda-files-update)
#+end_src

***** COMMENT Start every with a =draft= tag

#+begin_src emacs-lisp :tangle ./init.el
(defun jethro/tag-new-node-as-draft ()
  (org-roam-tag-add '("draft")))
(add-hook 'org-roam-capture-new-node-hook #'jethro/tag-new-node-as-draft)
#+end_src

***** Bindings

****** node-insert-immediate

#+begin_src emacs-lisp :tangle ./init.el
;; Bind this to C-c n I
(defun org-roam-node-insert-immediate (arg &rest args)
  (interactive "P")
  (let ((args (cons arg args))
        (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                  '(:immediate-finish t)))))
    (apply #'org-roam-node-insert args)))
#+end_src

**** Org-Roam-Ui

#+begin_src emacs-lisp :tangle ./init.el
(use-package org-roam-ui
    :straight t)
#+end_src

**** Org-Tidy

#+begin_src emacs-lisp :tangle ./init.el
(use-package org-tidy
  :straight (:host github :repo "jxq0/org-tidy")
  :config
  (add-hook 'org-mode-hook #'org-tidy-mode))

(setq org-tidy-properties-style 'inline)
(setq org-tidy-properties-inline-symbol "#")

(global-set-key (kbd "C-c u t") #'org-tidy-buffer)
(global-set-key (kbd "C-c u u") #'org-tidy-untidy-buffer)
#+end_src

**** Deft

#+begin_src emacs-lisp :tangle ./init.el
(use-package deft
  :after org
  :straight t
  :bind
  ("C-c n s" . deft)
  :custom
  (deft-recursive t)
  (deft-use-filter-string-for-filename t)
  (deft-default-extension "org")
  (deft-directory "/home/kchou/Textfiles/Braindump")
  :config
  (defun cf/deft-parse-title (file contents)
    "Parse the given FILE and CONTENTS and determine the title.
      If `deft-use-filename-as-title' is nil, the title is taken to
      be the first non-empty line of the FILE.  Else the base name of the FILE is
      used as title."
    (let ((begin (string-match "^#\\+[tT][iI][tT][lL][eE]: .*$" contents)))
      (if begin
          (string-trim (substring contents begin (match-end 0)) "#\\+[tT][iI][tT][lL][eE]: *" "[\n\t ]+")
        (deft-base-filename file))))
  (advice-add 'deft-parse-title :override #'cf/deft-parse-title)
  (setq deft-strip-summary-regexp
        (concat "\\("
                "[\n\t]" ;; blank
                "\\|^#\\+[[:alpha:]_]+:.*$" ;; org-mode metadata
                "\\|^:PROPERTIES:\n\\(.+\n\\)+:END:\n" ;; org-roam ID
                "\\|\\[\\[\\(.*\\]\\)" ;; any link
                "\\)")))
#+end_src

*** Org-Latex-Preview

This section contains all settings relevant to the overhauled =org-latex-preview=, written by [[https://github.com/tecosaur][TEC]]. It is supposed to become integrated to Org in version =9.7=, but until then I use his [[https://git.tecosaur.net/tec/org-mode][Org-Mode fork]].

#+begin_src emacs-lisp :tangle ./init.el
(setq org-latex-compiler "pdflatex"
      org-latex-preview-auto-generate 'live
      org-latex-preview-debounce 0.3
      org-latex-preview-throttle 0.3
      org-latex-preview-persist nil
      org-latex-preview-processing-indicator 'fringe
      org-latex-preview-numbered t
      org-latex-preview-width 0.75
      org-latex-preview-use-precompilation t
      org-latex-preview-live-display-type 'buffer
      org-latex-preview-default-process 'dvisvgm
      org-startup-with-latex-preview t)

(setq org-latex-default-packages-alist
  '(("AUTO" "inputenc"  t ("pdflatex"))
    ("T1"   "fontenc"   t ("pdflatex"))
    (""     "graphicx"  t)
    (""     "longtable" nil)
    (""     "wrapfig"   nil)
    (""     "rotating"  nil)
    ("normalem" "ulem"  t)
    (""     "amsmath"   t)
    (""     "amssymb"   t)
    (""     "amsfonts"  t)
    (""     "capt-of"   nil)
    (""     "hyperref"  nil)))

(setq org-latex-preview-preamble
      "\\documentclass{article}
% \\usepackage{amsmath, amsfonts, amssymb}  
% \\usepackage{newcomputermodern}  
% \\usepackage{polyglossia}  
% \\setmainlanguage{greek}   
% \\setotherlanguage{english}
% \\setmainfont{Iosevka Aile}
[DEFAULT-PACKAGES]
[PACKAGES]
\\usepackage{xcolor}")

(plist-put org-format-latex-options :zoom 1.2) ; Calibrated based on the TeX font and org-buffer font.

(add-hook 'org-mode-hook #'org-latex-preview-auto-mode)
#+end_src

*** Org-preview-html

This minor mode provides an easy preview of your org-exported HTML files using either the eww or xwidget WebKit browser. By default, when org-preview-html-mode is enabled a save will trigger a refresh of the preview. Refresh frequency can be configured using org-preview-html-refresh-configuration.

#+begin_src emacs-lisp :tangle ./init.el
(use-package org-preview-html
  :straight t
  :config
  (setq org-preview-html-viewer #'xwidget))
#+end_src

* Local Variables

With this setting, upon saving this file all the code snippets are tangled to =init.el= asynchronously and automatically.

#+begin_src emacs-lisp :tangle ./init.el
(setq enable-local-eval t)
#+end_src

# ;; Local Variables:
# ;; eval: (add-hook 'after-save-hook (lambda ()(if (y-or-n-p "Tangle?")(org-babel-tangle))) nil t)
# ;; End:
