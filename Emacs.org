#+PROPERTY: header-args:emacs-lisp :tangle ./init.el

* QOL Stuff
** Keybinds
*** Line Numbers
#+begin_src emacs-lisp

(global-set-key (kbd "M-<f2>") '(lambda () (interactive) (global-display-line-numbers-mode 'toggle)))

#+end_src

*** Window Splits
#+begin_src emacs-lisp

(defun split-and-follow-horizontally ()
  (interactive)
  (split-window-below)
  (balance-windows)
  (other-window 1))
(global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

(defun split-and-follow-vertically ()
  (interactive)
  (split-window-right)
  (balance-windows)
  (other-window 1))
(global-set-key (kbd "C-x 3") 'split-and-follow-vertically)

#+end_src

*** Jump Paragraphs
#+begin_src emacs-lisp

(global-set-key (kbd "M-]") 'forward-paragraph)
(global-set-key (kbd "M-[") 'backward-paragraph)

#+end_src

*** ESC same as C-g
#+begin_src emacs-lisp

;; Make ESC quit prompts
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src

*** View-Mode
#+begin_src emacs-lisp

;; (global-set-key (kbd "C-z") 'view-mode)

#+end_src

** Sane Defaults
#+begin_src emacs-lisp

(setq byte-compile-warnings '(cl-functions))

(setq inhibit-startup-message t)

(setq frame-resize-wise t)

(tool-bar-mode -1)          ; Disable the toolbar
(tooltip-mode -1)           ; Disable tooltips
(fringe-mode 2)         ; Give some breathing room
(menu-bar-mode -1)          ; Disable the menu bar

(set-language-environment "UTF-8")
(set-default-coding-systems 'utf-8)

(setq truncate-lines 1)

(setq x-select-enable-clipboard t)

(setq ring-bell-function 'ignore)

(defalias 'yes-or-no-p 'y-or-n-p)

(delete-selection-mode 1)

(setq column-number-mode t)

#+end_src

** Blink Cursor
#+begin_src emacs-lisp

(blink-cursor-mode 1)

#+end_src

** Highlight current line
#+begin_src emacs-lisp

(global-hl-line-mode 0)

#+end_src

** Fullscreen by default
#+begin_src emacs-lisp

(add-to-list 'default-frame-alist '(fullscreen . maximized))

#+end_src

** Scrolling and Scrollbars
#+begin_src emacs-lisp

(global-set-key (kbd "M-<f1>") 'scroll-bar-mode)
(scroll-bar-mode 0)
(window-divider-mode 0)

(setq scroll-bar-adjust-thumb-portion t)

(set-window-scroll-bars (minibuffer-window) nil nil nil nil t)

(setq mouse-wheel-scroll-amount '(5 ((shift) . 1)))

(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling

(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse

(setq scroll-step 1) ;; keyboard scroll one line at a time

;; (setq scroll-conservatively 100)

#+end_src

** Disable Backup Files
#+begin_src emacs-lisp

(setq make-backup-files nil)
(setq auto-save-default nil)

#+end_src

** Tab Configuration
#+begin_src emacs-lisp

(setq-default tab-width 2)
(setq-default standard-indent 2)
(setq c-basic-offset tab-width)
(setq-default electric-indent-inhibit t)
(setq-default indent-tabs-mode t)
(setq backward-delete-char-untabify-method 'nil)

#+end_src

** Parentheses Pairs
#+begin_src emacs-lisp

(setq electric-pair-pairs '(
                            (?\{ . ?\})
                            (?\( . ?\))
                            (?\[ . ?\])
                            (?\" . ?\")
                            ))
(electric-pair-mode t)

(add-hook 'org-mode-hook (lambda ()
           (setq-local electric-pair-inhibit-predicate
                   `(lambda (c)
                  (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))

#+end_src

** Line Numbers
#+begin_src emacs-lisp

(global-display-line-numbers-mode 0)

#+end_src

** Transparency on idle
#+begin_src emacs-lisp

 ;;(set-frame-parameter (selected-frame) 'alpha '(<active> . <inactive>))
 ;;(set-frame-parameter (selected-frame) 'alpha <both>)
 ;; (set-frame-parameter (selected-frame) 'alpha '(100 . 90))
 ;; (add-to-list 'default-frame-alist '(alpha . (100 . 90)))

#+end_src

* Fonts
** Settings for emacsclient
#+begin_src emacs-lisp

(pcase system-type
  ('gnu/linux "It's Linux!")
  ('windows-nt "It's Windows!")

  (if (daemonp)
      (message "Loading in the daemon!")
    (message "Loading in regular Emacs!"))
  ('darwin "It's macOS!"))

(defun efs/set-font-faces ()
  (message "Setting faces!")
  (set-face-attribute 'default nil :font "Iosevka" :height 170)
  (set-window-scroll-bars (minibuffer-window) nil nil nil nil t)

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font "Iosevka" :height 160)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font "GFS Didot" :height 170 :weight 'regular)

  ;; Set the emoji face
  (set-fontset-font t 'symbol (font-spec :family "JoyPixels" :size 24)))

(if (daemonp)
    (add-hook 'after-make-frame-functions
              (lambda (frame)
                (setq doom-modeline-icon t)
                (with-selected-frame frame
                  (efs/set-font-faces))))
  (efs/set-font-faces))

#+end_src

** Lsp-Ui Fonts
#+begin_src emacs-lisp

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(lsp-ui-doc-header ((t (:family "Iosevka"))))
 '(lsp-ui-doc-highlight-hover ((t (:inherit region :family "Iosevka"))))
 '(markdown-code-face ((t (:inherit nil :weight bold :family "Iosevka"))))
 '(markdown-inline-code-face ((t (:inherit (markdown-code-face font-lock-constant-face) :family "Iosevka"))))
 '(preview-face ((t nil)))
 '(preview-reference-face ((t (:foreground "#fbf1c7")))))
(put 'erase-buffer 'disabled nil)

#+end_src

** Spacing
#+begin_src emacs-lisp

(setq line-spacing 0.0)

#+end_src 

* Packages
** Setup
#+begin_src emacs-lisp

;; Initialize package sources
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
												 ("org" . "https://orgmode.org/elpa/")
												 ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)

#+end_src

** Color Theme
*** Modus Themes
#+begin_src emacs-lisp

;; (set-face-attribute 'mode-line nil :box t)

;; (setq modus-themes-vivendi-color-overrides
;;       '((bg-main . "#1d1f21")
;;         ;; (bg-dim . "#faf6ef")
;;         ;; (bg-alt . "#f7efe5")
;;         ;; (bg-active . "#e8dfd1")
;;         (bg-inactive . "#373b41")))

;; (setq modus-themes-operandi-color-overrides
;;       '((bg-main . "#fefcf4")
;;         (bg-dim . "#faf6ef")
;;         (bg-alt . "#f7efe5")
;;         (bg-active . "#e8dfd1")
;;         (bg-inactive . "#e8dfd1")))

(setq modus-themes-headings
      '((1 . (1.3))
        (2 . (1.25))
        (3 . (1.2))
        (4 . (1.15))
        (t . (1.1))))


;; (setq modus-themes-operandi-color-overrides '(nil))

(use-package modus-themes
  :ensure t
  :init
  ;; Add all your customizations prior to loading the themes
  (setq modus-themes-italic-constructs t
        modus-themes-bold-constructs nil
        modus-themes-mixed-fonts t
        modus-themes-subtle-line-numbers t
        modus-themes-deuteranopia nil

        modus-themes-fringes '(subtle) ; {nil,'subtle,'intense}

        ;; Options for `modus-themes-mode-line' are either nil, or a list
        ;; that can combine any of `3d' OR `moody', `borderless',
        ;; `accented'.  The variable's doc string shows all possible
        ;; combinations.
        modus-themes-mode-line '(accented moody)

        ;; Options for `modus-themes-syntax': nil, 'faint,
        ;; 'yellow-comments, 'green-strings,
        ;; 'yellow-comments-green-strings, 'alt-syntax,
        ;; 'alt-syntax-yellow-comments, 'faint-yellow-comments
        modus-themes-syntax '(faint)

        ;; Options for `modus-themes-hl-line': nil, 'intense-background,
        ;; 'accented-background, 'underline-neutral,
        ;; 'underline-accented, 'underline-only-neutral,
        ;; 'underline-only-accented
        modus-themes-hl-line '(intense accented)

        modus-themes-paren-match '(subtle-bold) ; {nil,'subtle-bold,'intense,'intense-bold}

        ;; Options for `modus-themes-links': nil, 'faint,
        ;; 'neutral-underline, 'faint-neutral-underline, 'no-underline,
        ;; 'underline-only, 'neutral-underline-only
        modus-themes-links '(neutral-underline)

        ;; Options for `modus-themes-prompts' are either nil (the
        ;; default), or a list of properties that may include any of those
        ;; symbols: `background', `bold', `gray', `intense'
        modus-themes-prompts '(nil)

        modus-themes-completions '(nil) ; {nil,'moderate,'opinionated}

        ;; Options for `modus-themes-region': nil, 'no-extend, 'bg-only,
        ;; 'bg-only-no-extend, 'accent, 'accent-no-extend
        ;; modus-themes-region 'bg-only-no-extend

        ;; Options for `modus-themes-diffs': nil, 'desaturated,
        ;; 'bg-only, 'deuteranopia, 'fg-only-deuteranopia
        modus-themes-diffs '(fg-only-deuteranopia desaturated)

        org-highlight-latex-and-related '(latex script)

				modus-themes-lang-checkers '(background faint)

        modus-themes-org-blocks 'gray-background; {nil,'gray-background,'tinted-background}
				)
  ;; Load the theme files before enabling a theme
  (modus-themes-load-themes)
  :config
  ;; Load the theme of your choice:
  (modus-themes-load-operandi) ;; OR (modus-themes-load-vivendi)
  :bind ("<f5>" . modus-themes-toggle)
	)

#+end_src

** Essentials
*** Window Navigation
**** Ace-Window
#+begin_src emacs-lisp

(global-set-key (kbd "M-o") 'ace-window)
(setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
(setq aw-dispatch-always nil)
(setq aw-background nil)
(defvar aw-dispatch-alist
  '((?x aw-delete-window "Delete Window")
    (?m aw-swap-window "Swap Windows")
    (?M aw-move-window "Move Window")
    (?c aw-copy-window "Copy Window")
    (?j aw-switch-buffer-in-window "Select Buffer")
    (?n aw-flip-window)
    (?u aw-switch-buffer-other-window "Switch Buffer Other Window")
    (?c aw-split-window-fair "Split Fair Window")
    (?v aw-split-window-vert "Split Vert Window")
    (?b aw-split-window-horz "Split Horz Window")
    (?o delete-other-windows "Delete Other Windows")
    (?? aw-show-dispatch-help))
  "List of actions for `aw-dispatch-default'.")

(use-package ace-window
  :ensure t)

#+end_src

**** Resize-Window
#+begin_src emacs-lisp

(setq resizewindow-allow-backgrounds nil)
(global-set-key (kbd "C-c C-;") 'resize-window)
(use-package resize-window
  :ensure t)

#+end_src

**** Winner Mode
#+begin_src emacs-lisp
(winner-mode)
#+end_src

*** File History
**** Undo-Tree
#+begin_src emacs-lisp

(use-package undo-tree
  :ensure t)
(setq undo-tree-auto-save-history t)
(defadvice undo-tree-make-history-save-file-name
    (after undo-tree activate)
  (setq ad-return-value (concat ad-return-value ".gz")))
(global-undo-tree-mode)

#+end_src

**** Saveplace
#+begin_src emacs-lisp

(require 'use-package)
(setq use-package-always-ensure t)

#+end_src

*** Autocompletion
**** Yasnippet
***** Yasnippet
#+begin_src emacs-lisp

(use-package yasnippet
	:ensure t
	:config
	(setq yas-snippet-dirs '("~/.emacs.d/snippets"))
	:init
	(yas-global-mode 1))

#+end_src

***** Yasnippet-Snippets
#+begin_src emacs-lisp

(use-package yasnippet-snippets
	:ensure t)

#+end_src

**** Company
***** Company
#+begin_src emacs-lisp
(use-package company
  :ensure t
  :custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.0))

(global-company-mode)
#+end_src

***** Company-Quickhelp
#+begin_src emacs-lisp
(use-package company-quickhelp
	:ensure t)
(add-hook 'company-mode-hook 'company-quickhelp-mode)
(company-quickhelp-mode)
#+end_src

***** Company-Box
#+begin_src emacs-lisp
(use-package company-box
	:ensure t)

(add-hook 'company-mode-hook 'company-box-mode)
#+end_src

***** Company-Posframe
#+begin_src emacs-lisp
;; (use-package company-posframe
;; 	:ensure t)

;; (add-hook 'company-mode-hook 'company-posframe-mode)
;; (company-posframe-mode)
#+end_src

*** M-x Buffer
**** Vertico
***** Vertico
#+begin_src emacs-lisp

(use-package vertico
  :ensure t
	;; TODO:
  ;; :bind (:map vertico-map
	;; 						:map minibuffer-local-map
	;; 						("M-h" . backward-kill-word))
  :custom
  (vertico-cycle t)
  :init
  (vertico-mode))

#+end_src

***** Savehist
#+begin_src emacs-lisp

(use-package savehist
	:ensure t
  :init
  (savehist-mode))

#+end_src

***** Vertico-Posframe
#+begin_src emacs-lisp

(use-package vertico-posframe
	:ensure t
  :init
  (vertico-posframe-mode))

#+end_src

**** Marginalia
#+begin_src emacs-lisp

(use-package marginalia
  :after vertico
  :ensure t
  :custom
  (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
  :init
  (marginalia-mode))

#+end_src

*** Vterm
#+begin_src emacs-lisp

(use-package vterm
  :ensure t)

#+end_src

*** OpenWith
#+begin_src emacs-lisp

(use-package openwith
  :load-path "/home/kchou/.emacs.d/elpa/openwith.el"
  :config
  (setq openwith-associations '(("\\.pdf\\'" "evince" (file))
																("\\.html\\'" "firefox" (file))
																("\\.mp4\\'" "mpv" (file))
																("\\.mkv\\'" "mpv" (file))
																;; ("\\.png\\'" "eog" (file))
																;; ("\\.jpg\\'" "eog" (file))
																))
  (openwith-mode t))

#+end_src

** Keybinds
*** Shift-number
#+begin_src emacs-lisp

(use-package shift-number
  :ensure t)

(global-set-key (kbd "C-+") 'shift-number-up)
(global-set-key (kbd "C-_") 'shift-number-down)

#+end_src

*** Which-Key
#+begin_src emacs-lisp

(use-package which-key
  :ensure t
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 1.5))

#+end_src

*** Move-Text
#+begin_src emacs-lisp

(use-package move-text
  :ensure t)
(global-set-key (kbd "M-S-<up>") 'move-text-up)
(global-set-key (kbd "M-S-<down>") 'move-text-down)


#+end_src

*** God-Mode
#+begin_src emacs-lisp

;; (use-package god-mode
;; 	:ensure t)

;; (require 'god-mode-isearch)

;; (setq god-exempt-major-modes nil)
;; (setq god-exempt-predicates nil)

;; (global-set-key (kbd "<escape>") #'god-mode-all)
;; (define-key isearch-mode-map (kbd "<escape>") #'god-mode-isearch-activate)
;; (define-key god-mode-isearch-map (kbd "<escape>") #'god-mode-isearch-disable)
;; (define-key god-local-mode-map (kbd ".") #'repeat)
;; (define-key god-local-mode-map (kbd "i") #'god-local-mode)
;; (setq god-mode-enable-function-key-translation nil)

;; (defun my-god-mode-update-cursor-type ()
;; 	(setq cursor-type (if (or god-local-mode buffer-read-only) 'box 'bar)))

;; (add-hook 'post-command-hook #'my-god-mode-update-cursor-type)

;; (add-hook 'elfeed-mode-hook (lambda () (god-local-mode -1)))

;; (god-mode)

#+end_src

** Programming
*** General
#+begin_src emacs-lisp

(add-hook 'prog-mode-hook (lambda () (display-line-numbers-mode 1)))
(add-hook 'prog-mode-hook (lambda () (hl-line-mode 1)))
(add-hook 'c-mode-hook (lambda () (display-fill-column-indicator-mode 1)))
(add-hook 'c++-mode-hook (lambda () (display-fill-column-indicator-mode 1)))
(add-hook 'prog-mode-hook 'highlight-indent-guides-mode)

#+end_src

*** LSP
**** Lsp-Mode
#+begin_src emacs-lisp

(use-package lsp-mode
  :ensure t
  :commands (lsp lsp-deferred)
  :init
	(setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
  :config
  (lsp-enable-which-key-integration t))

(add-hook 'c-mode-hook 'lsp)
(add-hook 'c++-mode-hook 'lsp)
(setq gc-cons-threshold 100000000)
(setq read-process-output-max (* 1024 1024)) ;; 1mb
(setq lsp-clients-clangd-arg "--header-insertion=never")

#+end_src

**** Lsp-Java
#+begin_src emacs-lisp

(use-package lsp-java
  :ensure t)

(add-hook 'java-mode-hook 'lsp)

#+end_src

**** Lsp-Ui
#+begin_src emacs-lisp

(use-package lsp-ui
  :ensure t
  :hook
	(lsp-mode . lsp-ui-mode)
	(lsp-ui-mode . flycheck-mode)
	:config
	(lsp-ui-peek-enable t))

(setq lsp-ui-doc-use-webkit t)

#+end_src

**** Lsp-Treemacs

#+begin_src emacs-lisp

(use-package lsp-treemacs
	:ensure t)

(lsp-treemacs-sync-mode 1)

#+end_src

*** DAP-mode
**** dap-mode
#+begin_src emacs-lisp

(use-package dap-mode
	:ensure t)

#+end_src

**** C/C++
#+begin_src emacs-lisp

(require 'dap-gdb-lldb)

#+end_src

*** Flycheck
**** Flycheck
#+begin_src emacs-lisp

(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))

#+end_src

*** Comment-Tags
#+begin_src emacs-lisp

(use-package comment-tags
  :ensure t
  :hook ((prog-mode . comment-tags-mode)))

#+end_src

*** Mips-Mode
#+begin_src emacs-lisp

(use-package mips-mode
	:ensure t
	:mode "\\.s$")

#+end_src

*** Fish-Mode
#+begin_src emacs-lisp

(use-package fish-mode
	:ensure t)

#+end_src

*** Hl-Todo
#+begin_src emacs-lisp

(use-package hl-todo
	:ensure t)
(add-hook 'prog-mode-hook (lambda () (hl-todo-mode 1)))
#+end_src

*** Highlight-Indent-Guides
#+begin_src emacs-lisp

(use-package highlight-indent-guides
	:ensure t)
(setq highlight-indent-guides-method 'character)
(setq highlight-indent-guides-responsive 'top)
(setq highlight-indent-guides-delay 0)

#+end_src

*** Treemacs
#+begin_src emacs-lisp
(use-package treemacs
  :ensure t
  :init
  :config
  (progn
    (setq treemacs-display-in-side-window          t
          treemacs-expand-after-init               t
          treemacs-find-workspace-method           'find-for-file-or-pick-first
          treemacs-indentation                     2
          treemacs-show-cursor                     nil
          treemacs-show-hidden-files               nil
          treemacs-silent-filewatch                nil
          treemacs-silent-refresh                  nil
          treemacs-sorting                         'alphabetic-asc
          treemacs-select-when-already-in-treemacs 'move-back
          treemacs-space-between-root-nodes        t
          treemacs-tag-follow-cleanup              t
          treemacs-text-scale                      nil
          treemacs-user-mode-line-format           nil
          treemacs-user-header-line-format         nil
          treemacs-wide-toggle-width               70
          treemacs-width                           35
          treemacs-width-increment                 1
          treemacs-width-is-initially-locked       t
          treemacs-workspace-switch-cleanup        nil)
		
    (treemacs-follow-mode nil)
    (treemacs-filewatch-mode nil)
    (treemacs-fringe-indicator-mode 'always)

    (treemacs-hide-gitignored-files-mode nil))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t t"   . treemacs)))
#+end_src

**** Treemacs-Icons-Dired
#+begin_src emacs-lisp
(use-package treemacs-icons-dired
  :hook (dired-mode . treemacs-icons-dired-enable-once)
  :ensure t)
#+end_src

** Ricing
*** Prettify-Symbols
#+begin_src emacs-lisp

(defun org-icons ()
  "Beautify org mode keywords."
	(setq prettify-symbols-alist '(
																 ("[ ]" . "☐")
																 ("[-]" . "⧄")
																 ("[X]" . "☑")
																 ;; ("TODO" . "🟥")
																 ;; ("DONE" . "✅")
																 ("#+begin_src" . "»")
																 ("#+end_src" . "«")
																 ))
	(prettify-symbols-mode))

(add-hook 'org-mode-hook 'org-icons)

#+end_src

*** Page-Break-Lines
#+begin_src emacs-lisp

(use-package page-break-lines
  :ensure t
  :init (global-page-break-lines-mode))

#+end_src

*** Rainbow-Mode
#+begin_src emacs-lisp

(use-package rainbow-mode
  :ensure t)

#+end_src

*** Rainbow-Delimeters
#+begin_src emacs-lisp

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

*** All-the-Icons
#+begin_src emacs-lisp

(use-package all-the-icons
  :ensure t)

#+end_src

*** Ligatures
#+begin_src emacs-lisp

(use-package ligature
	:load-path "/home/kchou/.emacs.d/elpa/ligature.el"
	:config
	;; Enable traditional ligature support in eww-mode, if the
	;; `variable-pitch' face supports it
	(ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
	;; Enable all programming ligatures in programming modes
	(ligature-set-ligatures 'prog-mode '(":::" "::=" "&&" "||" "::" ":=" "==" "!=" ">=" ">>" "<="
																			 "<<" "??" ";;" "->" "<-" "-->" "<--"
																			 ))
	;; Enables ligature checks globally in all buffers. You can also do it
	;; per mode with `ligature-mode'.
	(global-ligature-mode t))

#+end_src

*** Modeline
**** Minions
#+begin_src emacs-lisp

(use-package minions
  :ensure t
  :config (minions-mode 1))

(setq minions-mode-line-lighter nil)

#+end_src

**** Moody
#+begin_src emacs-lisp
(use-package moody
	:ensure t
  :config
  (setq x-underline-at-descent-line t)
  (moody-replace-mode-line-buffer-identification)
  (moody-replace-vc-mode)
  (moody-replace-eldoc-minibuffer-message-function))

(setq moody-mode-line-height 40)
#+end_src

**** Telephone-line
#+begin_src emacs-lisp
;; (use-package telephone-line
;; 	:ensure t)
;; (setq telephone-line-primary-left-separator 'telephone-line-tan-left
;;       telephone-line-secondary-left-separator 'telephone-line-tan-hollow-left
;;       telephone-line-primary-right-separator 'telephone-line-tan-right
;;       telephone-line-secondary-right-separator 'telephone-line-tan-hollow-right)
;; (telephone-line-mode)
#+end_src

*** Beacon-Mode
#+begin_src emacs-lisp
(use-package beacon
	:ensure t)

(beacon-mode)
#+end_src

*** Emojify
#+begin_src emacs-lisp
(use-package emojify
	:ensure t)

(setq emojify-display-style 'unicode)

(global-emojify-mode)

#+end_src

** PDF Reading
*** PDF-Tools
#+begin_src emacs-lisp

;; (use-package pdf-tools
;;   :ensure t
;;   :config
;;   (pdf-tools-install)
;;   (setq-default pdf-view-display-size 'fit-height))

;; (defun my-pdf-tools-backdrop ()
;;   (face-remap-add-relative
;;    'default
;;    `(:background ,(modus-themes-color 'bg))))

;; (defun my-pdf-tools-midnight-mode-toggle ()
;;   (when (derived-mode-p 'pdf-view-mode)
;;     (if (eq (car custom-enabled-themes) 'modus-vivendi)
;;         ;; (pdf-view-midnight-minor-mode 1)
;;         ;; (pdf-view-midnight-minor-mode -1)
;; 				)
;;     (my-pdf-tools-backdrop)))

;; (add-hook 'pdf-tools-enabled-hook #'my-pdf-tools-midnight-mode-toggle)
;; (add-hook 'modus-themes-after-load-theme-hook #'my-pdf-tools-midnight-mode-toggle)

#+end_src

*** Saveplace-PDF-View
#+begin_src emacs-lisp

;; (use-package saveplace-pdf-view
;;   :ensure t)

;; (save-place-mode 1)

#+end_src

** LaTeX
*** Settings
#+begin_src emacs-lisp

;; Idk why that doesn't work. Find a way to install
;; auctex and then let it be
;; (use-package auctex)

(setq TeX-auto-save t)
(setq TeX-parse-self t)
(setq-default TeX-engine 'xetex)
(setq-default TeX-PDF-mode t)
(setq TeX-source-correlate-mode t)
(setq TeX-view-program-list '(("Evince" "evince --page-index=%(outpage) %o")))
(setq TeX-view-program-selection '((output-pdf "Evince")))
;; (add-hook 'TeX-mode-hook (lambda () (org-fragtog-mode t)))

#+end_src

*** Texlab/LSP-LaTeX
#+begin_src emacs-lisp

(use-package lsp-latex
	:ensure t)

;; (with-eval-after-load "tex-mode"
;;  (add-hook 'TeX-mode-hook 'lsp)
;;  (add-hook 'latex-mode-hook 'lsp))

#+end_src

** Elfeed
*** Elfeed
#+begin_src emacs-lisp

(use-package elfeed
  :ensure t)
(global-set-key (kbd "C-x w") 'elfeed)

(defun browse-url-mpv (url &optional new-window)
  (start-process "mpv" "*mpv*" "mpv" url))

(setq browse-url-browser-function '(("https:\\/\\/www\\.youtube." . browse-url-mpv)
																		("." . browse-url-firefox)))

;; Mark all YouTube entries
(add-hook 'elfeed-new-entry-hook
          (elfeed-make-tagger :feed-url "youtube\\.com"
                              :add '(video youtube)))

(setq elfeed-feeds
			(quote
       (("https://www.di.uoa.gr/rss.xml")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCv1RoHmiVpx2tN2qxTXqcuw")
        ("https://www.gentoo.org/feeds/news.xml")
        ("https://archlinux.org/feeds/news/")
        ;; ("https://www.phoronix.com/rss.php")
        ("https://web.getmonero.org/feed.xml")
        ("https://github.com/analogcity.atom")
        ("https://github.com/bloc97/Anime4K/releases.atom")
        ;; ("https://github.com/GloriousEggroll/proton-ge-custom/releases.atom")
        ;; ("https://github.com/hydrusnetwork/hydrus/releases.atom")
        ("https://n-o-d-e.net/rss/rss.xml")
        ("https://linux-user.gr/tag/planet.rss")
        ("https://chubek.github.io/feed.xml")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCiRiQGCHGjDLT9FQXFW0I3A")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCnkp4xDOwqqJD7sSM3xdUiQ")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCnJnnEztMhpBEZaVORLriFg")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UC-GiI_5U-WkPIKqsq056wvg")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCduKuJToxWPizJ7I2E6n1kA")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCRYhCg0DHloE9gn-PAiAYNg")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCVls1GmFKf6WlTraIb_IaJg")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCk0ZSHgoZIcMw2-d7RxexVg")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCvF7Ll_WOgQWOw0KZJsVNXQ")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCuWsua1_gQ0inbBTqxmYuIQ")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UC7dF9qfBMXrSlaaFFDvV_Yg")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCP5bYRGZUJMG93AVoMekz9g")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCR1D15p_vdP3HkrH8wgjQRw")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UC8Q7XEy86Q7T-3kNpNjYgwA")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCtmY49Zn4l0RMJnTWfV7Wsg")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UC68TLK0mAEzUyHx5x5k-S1Q")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UC-N2UiQ-6s9eghbGYY_2zIA")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCZfvS8kiUwuEvEui7Nnj8BQ")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UChVO1EOEhSCQBIsZhpBtFXA")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UC2eYFnH61tmytImy1mTYvhA")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCWh6YtclgTAzReTASc4uSKw")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCb4pvsyqNrmBIGJFQxEukUA")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UC7YOGHUfC1Tb6E4pudI9STA")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UC8R8FRt1KcPiR-rtAflXmeg")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCJkMlOu7faDgqh4PfzbpLdg")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCUJexeVabymyw7G-rxdjUDw")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCD0b5d9sqNQTjrXfg5ik3eQ")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCz8QOKvQ0WW476fCehHiS1A")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UC2PA-AKmVpU6NKCGtZq_rKQ")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UC-MEgsEcEkbSuPWpu4a-PzQ")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCXkNod_JcH7PleOjwK_8rYQ")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCJRLqTorcf9ZgqwrklLCwEw")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCV5rcu0zw_3gLEex_f1D_fg")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UC70DBZLtHVkScdx49McB6NA")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCjr2bPAyPV7t35MvcgT3W8Q")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UC2Z1ygZRfexFQWzUGmu0bkw")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCG-KntY7aVnIGXYEBQvmBAQ")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCqYPhGiB9tkShZorfgcL2lA")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCsnGwSIHyoYN0kiINAGUKxg")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCvrLvII5oxSWEMEkszrxXEA")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCdBV0OgZXOsjbIR1Euh7XRA")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCUMSHXWczvxHy9e8silnVNw")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UC4NNPgQ9sOkBjw6GlkgCylg")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCIBhPkj8FNdZ3_gC8h9rfyw")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UC9OpVQuZxJ4YpmvWrGPOS3A")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCCuoqzrsHlwv1YyPKLuMDUQ")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCbGGg1xyVana3IY4WInzgyg")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCZcZAeq7QcPh_SwtKyAZQPg")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCld68syR8Wi-GY_n4CaoJGA")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCvunyt7q1t1V1GzWzzcZstA")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCNwGa76xVVwdEVToRZBIUIg")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCbZ8wD6pmGb9qHqvx9M4YBw")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCJetJ7nDNLlEzDLXv7KIo0w")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCSHZKyawb77ixDdsGog4iWA")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCV0qA-eDDICsRR9rPcnG7tw")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCWhwybsQg-EeBJpsqtmbscw")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCYO_jab_esuFRV4b17AJtAw")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UC967kVys_gTWDX04E0smQdw")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCAYKj_peyESIMDp5LtHlH2A")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCljOhRB2a3sQgLCdK9CHQvQ")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCSju5G2aFaWMqn-_0YBtq5A")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCKqIcxlUjwmeoSgh2OLtqLA")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCRE3NFNtdjR96-H4QG4U1Fg")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCK8XIGR5kRidIw2fWqwyHRA")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCk9NvmsPBC3lTn_L9kFaylA")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UC8F_ci7-G_XBXvoRGQR-fMQ")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCIyDqfi_cbkp-RU20aBF-MQ")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCR6LasBpceuYUhuLToKBzvQ")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UC9KvrhhUgAfO0nZUlhA6foA")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UC0uTPqBCFIpZxlz_Lv1tk_g")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCAiiOTio8Yu69c3XnR7nQBQ")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCqK_GSMbpiV8spgD3ZGloSw")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCmr_2dlYM0pYHdI9TeF5SIQ")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCwrCgfC5Z5biFxMZCSqnEcA")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCbnGhYfkxiZdOPrZg4RBevw")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCin0MCwCp9XozepZPJ_VHoA")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCFe6jenM1Bc54qtBsIJGRZQ")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCS0N5baNlQWJCUrhCEo8WlA")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCBMMB7Yi0eyFuY95Qn2o0Yg")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UC-8QAzbLcRglXeN_MY9blyw")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UC9EX_PSbngZP8pkPWSUpPzw")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UC6NPLaq5poP-CoLo3DPCC8w")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UC4t1o-i3DUieL5erhYYFYTQ")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCUzQJ3JBuQ9w-po4TXRJHiA")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UC4t1o-i3DUieL5erhYYFYTQ")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCR1IuLEqb6UEA_zQ81kwXfg")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UC2WHjPDvbE6O328n17ZGcfg")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCRb6Mw3fJ6OFzp-cB9X29aA")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCl-WbRCwODSd2BRQSxJcq2g")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCR2uRTQ53V_egXKFflMMaaw")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCxpeu8gvV77Z1wUrTpu5BUQ")
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCr7lmzIk63PZnBw3bezl-Mg")
				("https://www.youtube.com/feeds/videos.xml?channel_id=UCHnyfMqiRRG1u-2MsSQLbXA")
				("https://www.youtube.com/feeds/videos.xml?channel_id=UCpCSAcbqs-sjEVfk_hMfY9w")
				("https://www.youtube.com/feeds/videos.xml?channel_id=UCafEZMU5s8geb9oIly6xTrg")
				("https://www.youtube.com/feeds/videos.xml?channel_id=UCG-3rEW4IrDNa7-9iGByc2A")
				("https://www.youtube.com/feeds/videos.xml?channel_id=UCbYoTv5DbJmzKwxx5dmnu6g")
				("https://www.youtube.com/feeds/videos.xml?channel_id=UCsBjURrPoezykLs9EqgamOA")
				("https://www.youtube.com/feeds/videos.xml?channel_id=UCl7dSJloxuCa9IBFml7sakw")
				("https://www.youtube.com/feeds/videos.xml?channel_id=UCz3l6nyODzXLzTxIkARZ8rw")
				("https://www.youtube.com/feeds/videos.xml?channel_id=UCfm_QzFKkLcDYYKV2XEYWSw")
				("https://www.youtube.com/feeds/videos.xml?channel_id=UCj8mAcR6Mu1dvaXQ6BdShRQ")
				("https://www.youtube.com/feeds/videos.xml?channel_id=UC-f76NUQN5M-Z0cd0MOP5xw"))))

#+end_src

** Emacs Dashboard
*** Dashboard
#+begin_src emacs-lisp

(use-package dashboard
  :ensure t
  :config
  ;; Set the banner
  (setq dashboard-startup-banner 'logo)
  ;; Value can be
  ;; 'official which displays the official emacs logo
  ;; 'logo which displays an alternative emacs logo
  ;; 1, 2 or 3 which displays one of the text banners
  ;; "path/to/your/image.png" or "path/to/your/text.txt" which displays whatever image/text you would prefer
  ;; Content is not centered by default. To center, set
  (setq dashboard-center-content t)
  ;; To disable shortcut "jump" indicators for each section, set
  ;; (setq dashboard-show-shortcuts nil)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-set-init-info t)
  (setq dashboard-set-footer nil)
  (setq dashboard-week-agenda t)
  (setq dashboard-page-separator "\n\n")
  (setq dashboard-items '((bookmarks . 5)
                          (recents . 5)
                          (agenda . 5)))

  (dashboard-setup-startup-hook))

#+end_src

** Org
*** Org-Mode-Setup
#+begin_src emacs-lisp

;; (add-hook 'org-mode-hook (lambda () (truncate-lines 0)))

(defun efs/org-mode-setup ()
  (org-indent-mode)
  ;; (variable-pitch-mode 1)
  (visual-line-mode 1)
	)

#+end_src

*** General Settings
#+begin_src emacs-lisp

(setq org-agenda-start-with-log-mode t)
(setq org-log-done 'time)
(setq org-log-into-drawer t)

#+end_src

*** Org
#+begin_src emacs-lisp

(use-package org
  :ensure t
  :pin org
  :commands (org-capture org-agenda)
  :hook
  (org-mode . efs/org-mode-setup)
  :config
  (set-face-attribute 'org-headline-done nil :strike-through t)
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.8))
  (setq org-ellipsis "  "
        org-hide-emphasis-markers t
        org-startup-indented t
        org-pretty-entities nil
        org-agenda-block-separator ""
        org-fontify-whole-heading-line t
        org-fontify-done-headline t
        org-startup-with-inline-images t
        org-fontify-quote-and-verse-blocks t
        org-deadline-warning-days 14
        org-agenda-files
        '("~/Textfiles/TODO.org")))

#+end_src

*** Org-Latex
#+begin_src emacs-lisp

(setq org-latex-compiler "xelatex --synctex=1")
(setq org-latex-hyperref-template "")
;; (setq org-latex-with-hyperref nil)
(with-eval-after-load 'ox-latex
  (add-to-list 'org-latex-classes
               '("org-plain-latex"
                 "\\documentclass{article}
                                   [NO-DEFAULT-PACKAGES]
                                   [PACKAGES]
                                   [EXTRA]"
                 ("\\chapter{%s}" . "\\chapter*{%s}")
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))

(setq org-src-preserve-indentation t)
(setq indent-tabs-mode nil)

(add-hook 'org-mode-hook
      '(lambda ()
         (delete '("\\.pdf\\'" . default) org-file-apps)
         (add-to-list 'org-file-apps '("\\.pdf\\'" . "evince %s"))))

;; ;; For syntax highlighting in exported code blocks
;; ;; !!Needs python-pygments installed!!
(setq org-latex-listings 'minted
      org-latex-packages-alist '(("" "minted"))
      org-latex-pdf-process
      '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

#+end_src

*** Org-Bullets
#+begin_src emacs-lisp
(use-package org-bullets
  :hook (org-mode . org-bullets-mode))
#+end_src

*** Org-Pretty-Table
#+begin_src emacs-lisp

(use-package org-pretty-table
  :load-path "/home/kchou/.emacs.d/elpa/org-pretty-table")
(add-hook 'org-mode-hook (lambda () (org-pretty-table-mode)))

#+end_src

*** Org-Fragtog
#+begin_src emacs-lisp

(use-package org-fragtog
  :ensure t)

(add-hook 'org-mode-hook 'org-fragtog-mode)

#+end_src

*** Org-Visual-Fill
#+begin_src emacs-lisp

(defun efs/org-mode-visual-fill ()
  (setq visual-fill-column-width 110
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook
  (org-mode . efs/org-mode-visual-fill)
  (TeX-mode . efs/org-mode-visual-fill)
  (LaTeX-mode . efs/org-mode-visual-fill)
  (latex-mode . efs/org-mode-visual-fill)
	)

#+end_src

*** Org-Download
#+begin_src emacs-lisp

(use-package org-download
  :ensure t)

#+end_src

*** Org-Babel
#+begin_src emacs-lisp

(org-babel-do-load-languages
 'org-babel-load-languages '((C . t)))

(setq org-confirm-babel-evaluate nil)

#+end_src

*** HTMLize
#+begin_src emacs-lisp

(use-package htmlize
  :ensure t)

(setq org-html-validation-link nil)

#+end_src

*** Org-Roam
#+begin_src emacs-lisp
(use-package org-roam
  :ensure t
  :init
  (setq org-roam-v2-ack t)
  :custom
  (org-roam-directory (file-truename "~/Textfiles/RoamNotes"))
  (org-roam-completion-everywhere t)
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n g" . org-roam-graph)
         ("C-c n i" . org-roam-node-insert)
         ("C-c n c" . org-roam-capture)
         :map org-mode-map
         ("C-M-i"    . completion-at-point))
  :config
  ;; If you're using a vertical completion framework, you might want a more informative completion interface
  (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
  (org-roam-db-autosync-mode)
  (org-roam-setup))
#+end_src

** Writing
*** Flyspell
#+begin_src emacs-lisp

;; (dolist (hook '(org-mode-hook TeX-mode-hook)) (add-hook hook (lambda () (flyspell-mode 1))))

(defun flyspell-greek ()
  (interactive)
  (ispell-change-dictionary "el")
  (flyspell-buffer))

(defun flyspell-english ()
  (interactive)
  (ispell-change-dictionary "en")
  (flyspell-buffer))

#+end_src

** Git
*** Magit
#+begin_src emacs-lisp
(use-package magit
	:ensure t
  :commands magit-status)
#+end_src

*** Diff-Hl
#+begin_src emacs-lisp
(use-package diff-hl
	:ensure t)
(global-diff-hl-mode)
#+end_src

** Dired
#+begin_src emacs-lisp

(put 'dired-find-alternate-file 'disabled nil)
(add-hook 'dired-mode-hook (lambda () (hl-line-mode 1)))

#+end_src

